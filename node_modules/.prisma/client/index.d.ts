
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Setor
 * 
 */
export type Setor = $Result.DefaultSelection<Prisma.$SetorPayload>
/**
 * Model TramitacaoDocumento
 * 
 */
export type TramitacaoDocumento = $Result.DefaultSelection<Prisma.$TramitacaoDocumentoPayload>
/**
 * Model Documento
 * 
 */
export type Documento = $Result.DefaultSelection<Prisma.$DocumentoPayload>
/**
 * Model TipoDocumento
 * 
 */
export type TipoDocumento = $Result.DefaultSelection<Prisma.$TipoDocumentoPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Setors
 * const setors = await prisma.setor.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Setors
   * const setors = await prisma.setor.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs, $Utils.Call<Prisma.TypeMapCb, {
    extArgs: ExtArgs
  }>, ClientOptions>

      /**
   * `prisma.setor`: Exposes CRUD operations for the **Setor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Setors
    * const setors = await prisma.setor.findMany()
    * ```
    */
  get setor(): Prisma.SetorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tramitacaoDocumento`: Exposes CRUD operations for the **TramitacaoDocumento** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TramitacaoDocumentos
    * const tramitacaoDocumentos = await prisma.tramitacaoDocumento.findMany()
    * ```
    */
  get tramitacaoDocumento(): Prisma.TramitacaoDocumentoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.documento`: Exposes CRUD operations for the **Documento** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Documentos
    * const documentos = await prisma.documento.findMany()
    * ```
    */
  get documento(): Prisma.DocumentoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tipoDocumento`: Exposes CRUD operations for the **TipoDocumento** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TipoDocumentos
    * const tipoDocumentos = await prisma.tipoDocumento.findMany()
    * ```
    */
  get tipoDocumento(): Prisma.TipoDocumentoDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.3.1
   * Query Engine version: acc0b9dd43eb689cbd20c9470515d719db10d0b0
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Setor: 'Setor',
    TramitacaoDocumento: 'TramitacaoDocumento',
    Documento: 'Documento',
    TipoDocumento: 'TipoDocumento'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "setor" | "tramitacaoDocumento" | "documento" | "tipoDocumento"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Setor: {
        payload: Prisma.$SetorPayload<ExtArgs>
        fields: Prisma.SetorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SetorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SetorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SetorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SetorPayload>
          }
          findFirst: {
            args: Prisma.SetorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SetorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SetorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SetorPayload>
          }
          findMany: {
            args: Prisma.SetorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SetorPayload>[]
          }
          create: {
            args: Prisma.SetorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SetorPayload>
          }
          createMany: {
            args: Prisma.SetorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SetorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SetorPayload>
          }
          update: {
            args: Prisma.SetorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SetorPayload>
          }
          deleteMany: {
            args: Prisma.SetorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SetorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SetorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SetorPayload>
          }
          aggregate: {
            args: Prisma.SetorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSetor>
          }
          groupBy: {
            args: Prisma.SetorGroupByArgs<ExtArgs>
            result: $Utils.Optional<SetorGroupByOutputType>[]
          }
          count: {
            args: Prisma.SetorCountArgs<ExtArgs>
            result: $Utils.Optional<SetorCountAggregateOutputType> | number
          }
        }
      }
      TramitacaoDocumento: {
        payload: Prisma.$TramitacaoDocumentoPayload<ExtArgs>
        fields: Prisma.TramitacaoDocumentoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TramitacaoDocumentoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TramitacaoDocumentoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TramitacaoDocumentoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TramitacaoDocumentoPayload>
          }
          findFirst: {
            args: Prisma.TramitacaoDocumentoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TramitacaoDocumentoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TramitacaoDocumentoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TramitacaoDocumentoPayload>
          }
          findMany: {
            args: Prisma.TramitacaoDocumentoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TramitacaoDocumentoPayload>[]
          }
          create: {
            args: Prisma.TramitacaoDocumentoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TramitacaoDocumentoPayload>
          }
          createMany: {
            args: Prisma.TramitacaoDocumentoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TramitacaoDocumentoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TramitacaoDocumentoPayload>
          }
          update: {
            args: Prisma.TramitacaoDocumentoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TramitacaoDocumentoPayload>
          }
          deleteMany: {
            args: Prisma.TramitacaoDocumentoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TramitacaoDocumentoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TramitacaoDocumentoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TramitacaoDocumentoPayload>
          }
          aggregate: {
            args: Prisma.TramitacaoDocumentoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTramitacaoDocumento>
          }
          groupBy: {
            args: Prisma.TramitacaoDocumentoGroupByArgs<ExtArgs>
            result: $Utils.Optional<TramitacaoDocumentoGroupByOutputType>[]
          }
          count: {
            args: Prisma.TramitacaoDocumentoCountArgs<ExtArgs>
            result: $Utils.Optional<TramitacaoDocumentoCountAggregateOutputType> | number
          }
        }
      }
      Documento: {
        payload: Prisma.$DocumentoPayload<ExtArgs>
        fields: Prisma.DocumentoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DocumentoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DocumentoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentoPayload>
          }
          findFirst: {
            args: Prisma.DocumentoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DocumentoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentoPayload>
          }
          findMany: {
            args: Prisma.DocumentoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentoPayload>[]
          }
          create: {
            args: Prisma.DocumentoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentoPayload>
          }
          createMany: {
            args: Prisma.DocumentoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.DocumentoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentoPayload>
          }
          update: {
            args: Prisma.DocumentoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentoPayload>
          }
          deleteMany: {
            args: Prisma.DocumentoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DocumentoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DocumentoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentoPayload>
          }
          aggregate: {
            args: Prisma.DocumentoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDocumento>
          }
          groupBy: {
            args: Prisma.DocumentoGroupByArgs<ExtArgs>
            result: $Utils.Optional<DocumentoGroupByOutputType>[]
          }
          count: {
            args: Prisma.DocumentoCountArgs<ExtArgs>
            result: $Utils.Optional<DocumentoCountAggregateOutputType> | number
          }
        }
      }
      TipoDocumento: {
        payload: Prisma.$TipoDocumentoPayload<ExtArgs>
        fields: Prisma.TipoDocumentoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TipoDocumentoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoDocumentoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TipoDocumentoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoDocumentoPayload>
          }
          findFirst: {
            args: Prisma.TipoDocumentoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoDocumentoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TipoDocumentoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoDocumentoPayload>
          }
          findMany: {
            args: Prisma.TipoDocumentoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoDocumentoPayload>[]
          }
          create: {
            args: Prisma.TipoDocumentoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoDocumentoPayload>
          }
          createMany: {
            args: Prisma.TipoDocumentoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TipoDocumentoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoDocumentoPayload>
          }
          update: {
            args: Prisma.TipoDocumentoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoDocumentoPayload>
          }
          deleteMany: {
            args: Prisma.TipoDocumentoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TipoDocumentoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TipoDocumentoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoDocumentoPayload>
          }
          aggregate: {
            args: Prisma.TipoDocumentoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTipoDocumento>
          }
          groupBy: {
            args: Prisma.TipoDocumentoGroupByArgs<ExtArgs>
            result: $Utils.Optional<TipoDocumentoGroupByOutputType>[]
          }
          count: {
            args: Prisma.TipoDocumentoCountArgs<ExtArgs>
            result: $Utils.Optional<TipoDocumentoCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    setor?: SetorOmit
    tramitacaoDocumento?: TramitacaoDocumentoOmit
    documento?: DocumentoOmit
    tipoDocumento?: TipoDocumentoOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type SetorCountOutputType
   */

  export type SetorCountOutputType = {
    tramitacoesEnviadas: number
    tramitacoesRecebidas: number
  }

  export type SetorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tramitacoesEnviadas?: boolean | SetorCountOutputTypeCountTramitacoesEnviadasArgs
    tramitacoesRecebidas?: boolean | SetorCountOutputTypeCountTramitacoesRecebidasArgs
  }

  // Custom InputTypes
  /**
   * SetorCountOutputType without action
   */
  export type SetorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SetorCountOutputType
     */
    select?: SetorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SetorCountOutputType without action
   */
  export type SetorCountOutputTypeCountTramitacoesEnviadasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TramitacaoDocumentoWhereInput
  }

  /**
   * SetorCountOutputType without action
   */
  export type SetorCountOutputTypeCountTramitacoesRecebidasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TramitacaoDocumentoWhereInput
  }


  /**
   * Count Type DocumentoCountOutputType
   */

  export type DocumentoCountOutputType = {
    tramitacoes: number
  }

  export type DocumentoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tramitacoes?: boolean | DocumentoCountOutputTypeCountTramitacoesArgs
  }

  // Custom InputTypes
  /**
   * DocumentoCountOutputType without action
   */
  export type DocumentoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentoCountOutputType
     */
    select?: DocumentoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DocumentoCountOutputType without action
   */
  export type DocumentoCountOutputTypeCountTramitacoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TramitacaoDocumentoWhereInput
  }


  /**
   * Count Type TipoDocumentoCountOutputType
   */

  export type TipoDocumentoCountOutputType = {
    documentos: number
  }

  export type TipoDocumentoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documentos?: boolean | TipoDocumentoCountOutputTypeCountDocumentosArgs
  }

  // Custom InputTypes
  /**
   * TipoDocumentoCountOutputType without action
   */
  export type TipoDocumentoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoDocumentoCountOutputType
     */
    select?: TipoDocumentoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TipoDocumentoCountOutputType without action
   */
  export type TipoDocumentoCountOutputTypeCountDocumentosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentoWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Setor
   */

  export type AggregateSetor = {
    _count: SetorCountAggregateOutputType | null
    _avg: SetorAvgAggregateOutputType | null
    _sum: SetorSumAggregateOutputType | null
    _min: SetorMinAggregateOutputType | null
    _max: SetorMaxAggregateOutputType | null
  }

  export type SetorAvgAggregateOutputType = {
    id: number | null
  }

  export type SetorSumAggregateOutputType = {
    id: number | null
  }

  export type SetorMinAggregateOutputType = {
    id: number | null
    sigla: string | null
    descricao: string | null
  }

  export type SetorMaxAggregateOutputType = {
    id: number | null
    sigla: string | null
    descricao: string | null
  }

  export type SetorCountAggregateOutputType = {
    id: number
    sigla: number
    descricao: number
    _all: number
  }


  export type SetorAvgAggregateInputType = {
    id?: true
  }

  export type SetorSumAggregateInputType = {
    id?: true
  }

  export type SetorMinAggregateInputType = {
    id?: true
    sigla?: true
    descricao?: true
  }

  export type SetorMaxAggregateInputType = {
    id?: true
    sigla?: true
    descricao?: true
  }

  export type SetorCountAggregateInputType = {
    id?: true
    sigla?: true
    descricao?: true
    _all?: true
  }

  export type SetorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Setor to aggregate.
     */
    where?: SetorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Setors to fetch.
     */
    orderBy?: SetorOrderByWithRelationInput | SetorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SetorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Setors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Setors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Setors
    **/
    _count?: true | SetorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SetorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SetorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SetorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SetorMaxAggregateInputType
  }

  export type GetSetorAggregateType<T extends SetorAggregateArgs> = {
        [P in keyof T & keyof AggregateSetor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSetor[P]>
      : GetScalarType<T[P], AggregateSetor[P]>
  }




  export type SetorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SetorWhereInput
    orderBy?: SetorOrderByWithAggregationInput | SetorOrderByWithAggregationInput[]
    by: SetorScalarFieldEnum[] | SetorScalarFieldEnum
    having?: SetorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SetorCountAggregateInputType | true
    _avg?: SetorAvgAggregateInputType
    _sum?: SetorSumAggregateInputType
    _min?: SetorMinAggregateInputType
    _max?: SetorMaxAggregateInputType
  }

  export type SetorGroupByOutputType = {
    id: number
    sigla: string
    descricao: string
    _count: SetorCountAggregateOutputType | null
    _avg: SetorAvgAggregateOutputType | null
    _sum: SetorSumAggregateOutputType | null
    _min: SetorMinAggregateOutputType | null
    _max: SetorMaxAggregateOutputType | null
  }

  type GetSetorGroupByPayload<T extends SetorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SetorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SetorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SetorGroupByOutputType[P]>
            : GetScalarType<T[P], SetorGroupByOutputType[P]>
        }
      >
    >


  export type SetorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sigla?: boolean
    descricao?: boolean
    tramitacoesEnviadas?: boolean | Setor$tramitacoesEnviadasArgs<ExtArgs>
    tramitacoesRecebidas?: boolean | Setor$tramitacoesRecebidasArgs<ExtArgs>
    _count?: boolean | SetorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["setor"]>



  export type SetorSelectScalar = {
    id?: boolean
    sigla?: boolean
    descricao?: boolean
  }

  export type SetorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sigla" | "descricao", ExtArgs["result"]["setor"]>
  export type SetorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tramitacoesEnviadas?: boolean | Setor$tramitacoesEnviadasArgs<ExtArgs>
    tramitacoesRecebidas?: boolean | Setor$tramitacoesRecebidasArgs<ExtArgs>
    _count?: boolean | SetorCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $SetorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Setor"
    objects: {
      tramitacoesEnviadas: Prisma.$TramitacaoDocumentoPayload<ExtArgs>[]
      tramitacoesRecebidas: Prisma.$TramitacaoDocumentoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      sigla: string
      descricao: string
    }, ExtArgs["result"]["setor"]>
    composites: {}
  }

  type SetorGetPayload<S extends boolean | null | undefined | SetorDefaultArgs> = $Result.GetResult<Prisma.$SetorPayload, S>

  type SetorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SetorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SetorCountAggregateInputType | true
    }

  export interface SetorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Setor'], meta: { name: 'Setor' } }
    /**
     * Find zero or one Setor that matches the filter.
     * @param {SetorFindUniqueArgs} args - Arguments to find a Setor
     * @example
     * // Get one Setor
     * const setor = await prisma.setor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SetorFindUniqueArgs>(args: SelectSubset<T, SetorFindUniqueArgs<ExtArgs>>): Prisma__SetorClient<$Result.GetResult<Prisma.$SetorPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Setor that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SetorFindUniqueOrThrowArgs} args - Arguments to find a Setor
     * @example
     * // Get one Setor
     * const setor = await prisma.setor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SetorFindUniqueOrThrowArgs>(args: SelectSubset<T, SetorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SetorClient<$Result.GetResult<Prisma.$SetorPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Setor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SetorFindFirstArgs} args - Arguments to find a Setor
     * @example
     * // Get one Setor
     * const setor = await prisma.setor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SetorFindFirstArgs>(args?: SelectSubset<T, SetorFindFirstArgs<ExtArgs>>): Prisma__SetorClient<$Result.GetResult<Prisma.$SetorPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Setor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SetorFindFirstOrThrowArgs} args - Arguments to find a Setor
     * @example
     * // Get one Setor
     * const setor = await prisma.setor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SetorFindFirstOrThrowArgs>(args?: SelectSubset<T, SetorFindFirstOrThrowArgs<ExtArgs>>): Prisma__SetorClient<$Result.GetResult<Prisma.$SetorPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Setors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SetorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Setors
     * const setors = await prisma.setor.findMany()
     * 
     * // Get first 10 Setors
     * const setors = await prisma.setor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const setorWithIdOnly = await prisma.setor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SetorFindManyArgs>(args?: SelectSubset<T, SetorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SetorPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Setor.
     * @param {SetorCreateArgs} args - Arguments to create a Setor.
     * @example
     * // Create one Setor
     * const Setor = await prisma.setor.create({
     *   data: {
     *     // ... data to create a Setor
     *   }
     * })
     * 
     */
    create<T extends SetorCreateArgs>(args: SelectSubset<T, SetorCreateArgs<ExtArgs>>): Prisma__SetorClient<$Result.GetResult<Prisma.$SetorPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Setors.
     * @param {SetorCreateManyArgs} args - Arguments to create many Setors.
     * @example
     * // Create many Setors
     * const setor = await prisma.setor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SetorCreateManyArgs>(args?: SelectSubset<T, SetorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Setor.
     * @param {SetorDeleteArgs} args - Arguments to delete one Setor.
     * @example
     * // Delete one Setor
     * const Setor = await prisma.setor.delete({
     *   where: {
     *     // ... filter to delete one Setor
     *   }
     * })
     * 
     */
    delete<T extends SetorDeleteArgs>(args: SelectSubset<T, SetorDeleteArgs<ExtArgs>>): Prisma__SetorClient<$Result.GetResult<Prisma.$SetorPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Setor.
     * @param {SetorUpdateArgs} args - Arguments to update one Setor.
     * @example
     * // Update one Setor
     * const setor = await prisma.setor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SetorUpdateArgs>(args: SelectSubset<T, SetorUpdateArgs<ExtArgs>>): Prisma__SetorClient<$Result.GetResult<Prisma.$SetorPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Setors.
     * @param {SetorDeleteManyArgs} args - Arguments to filter Setors to delete.
     * @example
     * // Delete a few Setors
     * const { count } = await prisma.setor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SetorDeleteManyArgs>(args?: SelectSubset<T, SetorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Setors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SetorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Setors
     * const setor = await prisma.setor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SetorUpdateManyArgs>(args: SelectSubset<T, SetorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Setor.
     * @param {SetorUpsertArgs} args - Arguments to update or create a Setor.
     * @example
     * // Update or create a Setor
     * const setor = await prisma.setor.upsert({
     *   create: {
     *     // ... data to create a Setor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Setor we want to update
     *   }
     * })
     */
    upsert<T extends SetorUpsertArgs>(args: SelectSubset<T, SetorUpsertArgs<ExtArgs>>): Prisma__SetorClient<$Result.GetResult<Prisma.$SetorPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Setors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SetorCountArgs} args - Arguments to filter Setors to count.
     * @example
     * // Count the number of Setors
     * const count = await prisma.setor.count({
     *   where: {
     *     // ... the filter for the Setors we want to count
     *   }
     * })
    **/
    count<T extends SetorCountArgs>(
      args?: Subset<T, SetorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SetorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Setor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SetorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SetorAggregateArgs>(args: Subset<T, SetorAggregateArgs>): Prisma.PrismaPromise<GetSetorAggregateType<T>>

    /**
     * Group by Setor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SetorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SetorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SetorGroupByArgs['orderBy'] }
        : { orderBy?: SetorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SetorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSetorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Setor model
   */
  readonly fields: SetorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Setor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SetorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tramitacoesEnviadas<T extends Setor$tramitacoesEnviadasArgs<ExtArgs> = {}>(args?: Subset<T, Setor$tramitacoesEnviadasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TramitacaoDocumentoPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    tramitacoesRecebidas<T extends Setor$tramitacoesRecebidasArgs<ExtArgs> = {}>(args?: Subset<T, Setor$tramitacoesRecebidasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TramitacaoDocumentoPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Setor model
   */ 
  interface SetorFieldRefs {
    readonly id: FieldRef<"Setor", 'Int'>
    readonly sigla: FieldRef<"Setor", 'String'>
    readonly descricao: FieldRef<"Setor", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Setor findUnique
   */
  export type SetorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setor
     */
    select?: SetorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Setor
     */
    omit?: SetorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SetorInclude<ExtArgs> | null
    /**
     * Filter, which Setor to fetch.
     */
    where: SetorWhereUniqueInput
  }

  /**
   * Setor findUniqueOrThrow
   */
  export type SetorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setor
     */
    select?: SetorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Setor
     */
    omit?: SetorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SetorInclude<ExtArgs> | null
    /**
     * Filter, which Setor to fetch.
     */
    where: SetorWhereUniqueInput
  }

  /**
   * Setor findFirst
   */
  export type SetorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setor
     */
    select?: SetorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Setor
     */
    omit?: SetorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SetorInclude<ExtArgs> | null
    /**
     * Filter, which Setor to fetch.
     */
    where?: SetorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Setors to fetch.
     */
    orderBy?: SetorOrderByWithRelationInput | SetorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Setors.
     */
    cursor?: SetorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Setors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Setors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Setors.
     */
    distinct?: SetorScalarFieldEnum | SetorScalarFieldEnum[]
  }

  /**
   * Setor findFirstOrThrow
   */
  export type SetorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setor
     */
    select?: SetorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Setor
     */
    omit?: SetorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SetorInclude<ExtArgs> | null
    /**
     * Filter, which Setor to fetch.
     */
    where?: SetorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Setors to fetch.
     */
    orderBy?: SetorOrderByWithRelationInput | SetorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Setors.
     */
    cursor?: SetorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Setors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Setors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Setors.
     */
    distinct?: SetorScalarFieldEnum | SetorScalarFieldEnum[]
  }

  /**
   * Setor findMany
   */
  export type SetorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setor
     */
    select?: SetorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Setor
     */
    omit?: SetorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SetorInclude<ExtArgs> | null
    /**
     * Filter, which Setors to fetch.
     */
    where?: SetorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Setors to fetch.
     */
    orderBy?: SetorOrderByWithRelationInput | SetorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Setors.
     */
    cursor?: SetorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Setors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Setors.
     */
    skip?: number
    distinct?: SetorScalarFieldEnum | SetorScalarFieldEnum[]
  }

  /**
   * Setor create
   */
  export type SetorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setor
     */
    select?: SetorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Setor
     */
    omit?: SetorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SetorInclude<ExtArgs> | null
    /**
     * The data needed to create a Setor.
     */
    data: XOR<SetorCreateInput, SetorUncheckedCreateInput>
  }

  /**
   * Setor createMany
   */
  export type SetorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Setors.
     */
    data: SetorCreateManyInput | SetorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Setor update
   */
  export type SetorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setor
     */
    select?: SetorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Setor
     */
    omit?: SetorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SetorInclude<ExtArgs> | null
    /**
     * The data needed to update a Setor.
     */
    data: XOR<SetorUpdateInput, SetorUncheckedUpdateInput>
    /**
     * Choose, which Setor to update.
     */
    where: SetorWhereUniqueInput
  }

  /**
   * Setor updateMany
   */
  export type SetorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Setors.
     */
    data: XOR<SetorUpdateManyMutationInput, SetorUncheckedUpdateManyInput>
    /**
     * Filter which Setors to update
     */
    where?: SetorWhereInput
    /**
     * Limit how many Setors to update.
     */
    limit?: number
  }

  /**
   * Setor upsert
   */
  export type SetorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setor
     */
    select?: SetorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Setor
     */
    omit?: SetorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SetorInclude<ExtArgs> | null
    /**
     * The filter to search for the Setor to update in case it exists.
     */
    where: SetorWhereUniqueInput
    /**
     * In case the Setor found by the `where` argument doesn't exist, create a new Setor with this data.
     */
    create: XOR<SetorCreateInput, SetorUncheckedCreateInput>
    /**
     * In case the Setor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SetorUpdateInput, SetorUncheckedUpdateInput>
  }

  /**
   * Setor delete
   */
  export type SetorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setor
     */
    select?: SetorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Setor
     */
    omit?: SetorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SetorInclude<ExtArgs> | null
    /**
     * Filter which Setor to delete.
     */
    where: SetorWhereUniqueInput
  }

  /**
   * Setor deleteMany
   */
  export type SetorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Setors to delete
     */
    where?: SetorWhereInput
    /**
     * Limit how many Setors to delete.
     */
    limit?: number
  }

  /**
   * Setor.tramitacoesEnviadas
   */
  export type Setor$tramitacoesEnviadasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TramitacaoDocumento
     */
    select?: TramitacaoDocumentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TramitacaoDocumento
     */
    omit?: TramitacaoDocumentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TramitacaoDocumentoInclude<ExtArgs> | null
    where?: TramitacaoDocumentoWhereInput
    orderBy?: TramitacaoDocumentoOrderByWithRelationInput | TramitacaoDocumentoOrderByWithRelationInput[]
    cursor?: TramitacaoDocumentoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TramitacaoDocumentoScalarFieldEnum | TramitacaoDocumentoScalarFieldEnum[]
  }

  /**
   * Setor.tramitacoesRecebidas
   */
  export type Setor$tramitacoesRecebidasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TramitacaoDocumento
     */
    select?: TramitacaoDocumentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TramitacaoDocumento
     */
    omit?: TramitacaoDocumentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TramitacaoDocumentoInclude<ExtArgs> | null
    where?: TramitacaoDocumentoWhereInput
    orderBy?: TramitacaoDocumentoOrderByWithRelationInput | TramitacaoDocumentoOrderByWithRelationInput[]
    cursor?: TramitacaoDocumentoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TramitacaoDocumentoScalarFieldEnum | TramitacaoDocumentoScalarFieldEnum[]
  }

  /**
   * Setor without action
   */
  export type SetorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setor
     */
    select?: SetorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Setor
     */
    omit?: SetorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SetorInclude<ExtArgs> | null
  }


  /**
   * Model TramitacaoDocumento
   */

  export type AggregateTramitacaoDocumento = {
    _count: TramitacaoDocumentoCountAggregateOutputType | null
    _avg: TramitacaoDocumentoAvgAggregateOutputType | null
    _sum: TramitacaoDocumentoSumAggregateOutputType | null
    _min: TramitacaoDocumentoMinAggregateOutputType | null
    _max: TramitacaoDocumentoMaxAggregateOutputType | null
  }

  export type TramitacaoDocumentoAvgAggregateOutputType = {
    id: number | null
    documentoId: number | null
    setorEnvioId: number | null
    setorRecebeId: number | null
  }

  export type TramitacaoDocumentoSumAggregateOutputType = {
    id: number | null
    documentoId: number | null
    setorEnvioId: number | null
    setorRecebeId: number | null
  }

  export type TramitacaoDocumentoMinAggregateOutputType = {
    id: number | null
    documentoId: number | null
    setorEnvioId: number | null
    setorRecebeId: number | null
    recebido: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TramitacaoDocumentoMaxAggregateOutputType = {
    id: number | null
    documentoId: number | null
    setorEnvioId: number | null
    setorRecebeId: number | null
    recebido: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TramitacaoDocumentoCountAggregateOutputType = {
    id: number
    documentoId: number
    setorEnvioId: number
    setorRecebeId: number
    recebido: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TramitacaoDocumentoAvgAggregateInputType = {
    id?: true
    documentoId?: true
    setorEnvioId?: true
    setorRecebeId?: true
  }

  export type TramitacaoDocumentoSumAggregateInputType = {
    id?: true
    documentoId?: true
    setorEnvioId?: true
    setorRecebeId?: true
  }

  export type TramitacaoDocumentoMinAggregateInputType = {
    id?: true
    documentoId?: true
    setorEnvioId?: true
    setorRecebeId?: true
    recebido?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TramitacaoDocumentoMaxAggregateInputType = {
    id?: true
    documentoId?: true
    setorEnvioId?: true
    setorRecebeId?: true
    recebido?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TramitacaoDocumentoCountAggregateInputType = {
    id?: true
    documentoId?: true
    setorEnvioId?: true
    setorRecebeId?: true
    recebido?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TramitacaoDocumentoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TramitacaoDocumento to aggregate.
     */
    where?: TramitacaoDocumentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TramitacaoDocumentos to fetch.
     */
    orderBy?: TramitacaoDocumentoOrderByWithRelationInput | TramitacaoDocumentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TramitacaoDocumentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TramitacaoDocumentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TramitacaoDocumentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TramitacaoDocumentos
    **/
    _count?: true | TramitacaoDocumentoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TramitacaoDocumentoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TramitacaoDocumentoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TramitacaoDocumentoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TramitacaoDocumentoMaxAggregateInputType
  }

  export type GetTramitacaoDocumentoAggregateType<T extends TramitacaoDocumentoAggregateArgs> = {
        [P in keyof T & keyof AggregateTramitacaoDocumento]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTramitacaoDocumento[P]>
      : GetScalarType<T[P], AggregateTramitacaoDocumento[P]>
  }




  export type TramitacaoDocumentoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TramitacaoDocumentoWhereInput
    orderBy?: TramitacaoDocumentoOrderByWithAggregationInput | TramitacaoDocumentoOrderByWithAggregationInput[]
    by: TramitacaoDocumentoScalarFieldEnum[] | TramitacaoDocumentoScalarFieldEnum
    having?: TramitacaoDocumentoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TramitacaoDocumentoCountAggregateInputType | true
    _avg?: TramitacaoDocumentoAvgAggregateInputType
    _sum?: TramitacaoDocumentoSumAggregateInputType
    _min?: TramitacaoDocumentoMinAggregateInputType
    _max?: TramitacaoDocumentoMaxAggregateInputType
  }

  export type TramitacaoDocumentoGroupByOutputType = {
    id: number
    documentoId: number
    setorEnvioId: number
    setorRecebeId: number
    recebido: boolean
    createdAt: Date
    updatedAt: Date
    _count: TramitacaoDocumentoCountAggregateOutputType | null
    _avg: TramitacaoDocumentoAvgAggregateOutputType | null
    _sum: TramitacaoDocumentoSumAggregateOutputType | null
    _min: TramitacaoDocumentoMinAggregateOutputType | null
    _max: TramitacaoDocumentoMaxAggregateOutputType | null
  }

  type GetTramitacaoDocumentoGroupByPayload<T extends TramitacaoDocumentoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TramitacaoDocumentoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TramitacaoDocumentoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TramitacaoDocumentoGroupByOutputType[P]>
            : GetScalarType<T[P], TramitacaoDocumentoGroupByOutputType[P]>
        }
      >
    >


  export type TramitacaoDocumentoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    documentoId?: boolean
    setorEnvioId?: boolean
    setorRecebeId?: boolean
    recebido?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    documento?: boolean | DocumentoDefaultArgs<ExtArgs>
    setorEnvio?: boolean | SetorDefaultArgs<ExtArgs>
    setorRecebe?: boolean | SetorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tramitacaoDocumento"]>



  export type TramitacaoDocumentoSelectScalar = {
    id?: boolean
    documentoId?: boolean
    setorEnvioId?: boolean
    setorRecebeId?: boolean
    recebido?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TramitacaoDocumentoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "documentoId" | "setorEnvioId" | "setorRecebeId" | "recebido" | "createdAt" | "updatedAt", ExtArgs["result"]["tramitacaoDocumento"]>
  export type TramitacaoDocumentoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documento?: boolean | DocumentoDefaultArgs<ExtArgs>
    setorEnvio?: boolean | SetorDefaultArgs<ExtArgs>
    setorRecebe?: boolean | SetorDefaultArgs<ExtArgs>
  }

  export type $TramitacaoDocumentoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TramitacaoDocumento"
    objects: {
      documento: Prisma.$DocumentoPayload<ExtArgs>
      setorEnvio: Prisma.$SetorPayload<ExtArgs>
      setorRecebe: Prisma.$SetorPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      documentoId: number
      setorEnvioId: number
      setorRecebeId: number
      recebido: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["tramitacaoDocumento"]>
    composites: {}
  }

  type TramitacaoDocumentoGetPayload<S extends boolean | null | undefined | TramitacaoDocumentoDefaultArgs> = $Result.GetResult<Prisma.$TramitacaoDocumentoPayload, S>

  type TramitacaoDocumentoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TramitacaoDocumentoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TramitacaoDocumentoCountAggregateInputType | true
    }

  export interface TramitacaoDocumentoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TramitacaoDocumento'], meta: { name: 'TramitacaoDocumento' } }
    /**
     * Find zero or one TramitacaoDocumento that matches the filter.
     * @param {TramitacaoDocumentoFindUniqueArgs} args - Arguments to find a TramitacaoDocumento
     * @example
     * // Get one TramitacaoDocumento
     * const tramitacaoDocumento = await prisma.tramitacaoDocumento.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TramitacaoDocumentoFindUniqueArgs>(args: SelectSubset<T, TramitacaoDocumentoFindUniqueArgs<ExtArgs>>): Prisma__TramitacaoDocumentoClient<$Result.GetResult<Prisma.$TramitacaoDocumentoPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one TramitacaoDocumento that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TramitacaoDocumentoFindUniqueOrThrowArgs} args - Arguments to find a TramitacaoDocumento
     * @example
     * // Get one TramitacaoDocumento
     * const tramitacaoDocumento = await prisma.tramitacaoDocumento.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TramitacaoDocumentoFindUniqueOrThrowArgs>(args: SelectSubset<T, TramitacaoDocumentoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TramitacaoDocumentoClient<$Result.GetResult<Prisma.$TramitacaoDocumentoPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first TramitacaoDocumento that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TramitacaoDocumentoFindFirstArgs} args - Arguments to find a TramitacaoDocumento
     * @example
     * // Get one TramitacaoDocumento
     * const tramitacaoDocumento = await prisma.tramitacaoDocumento.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TramitacaoDocumentoFindFirstArgs>(args?: SelectSubset<T, TramitacaoDocumentoFindFirstArgs<ExtArgs>>): Prisma__TramitacaoDocumentoClient<$Result.GetResult<Prisma.$TramitacaoDocumentoPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first TramitacaoDocumento that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TramitacaoDocumentoFindFirstOrThrowArgs} args - Arguments to find a TramitacaoDocumento
     * @example
     * // Get one TramitacaoDocumento
     * const tramitacaoDocumento = await prisma.tramitacaoDocumento.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TramitacaoDocumentoFindFirstOrThrowArgs>(args?: SelectSubset<T, TramitacaoDocumentoFindFirstOrThrowArgs<ExtArgs>>): Prisma__TramitacaoDocumentoClient<$Result.GetResult<Prisma.$TramitacaoDocumentoPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more TramitacaoDocumentos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TramitacaoDocumentoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TramitacaoDocumentos
     * const tramitacaoDocumentos = await prisma.tramitacaoDocumento.findMany()
     * 
     * // Get first 10 TramitacaoDocumentos
     * const tramitacaoDocumentos = await prisma.tramitacaoDocumento.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tramitacaoDocumentoWithIdOnly = await prisma.tramitacaoDocumento.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TramitacaoDocumentoFindManyArgs>(args?: SelectSubset<T, TramitacaoDocumentoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TramitacaoDocumentoPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a TramitacaoDocumento.
     * @param {TramitacaoDocumentoCreateArgs} args - Arguments to create a TramitacaoDocumento.
     * @example
     * // Create one TramitacaoDocumento
     * const TramitacaoDocumento = await prisma.tramitacaoDocumento.create({
     *   data: {
     *     // ... data to create a TramitacaoDocumento
     *   }
     * })
     * 
     */
    create<T extends TramitacaoDocumentoCreateArgs>(args: SelectSubset<T, TramitacaoDocumentoCreateArgs<ExtArgs>>): Prisma__TramitacaoDocumentoClient<$Result.GetResult<Prisma.$TramitacaoDocumentoPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many TramitacaoDocumentos.
     * @param {TramitacaoDocumentoCreateManyArgs} args - Arguments to create many TramitacaoDocumentos.
     * @example
     * // Create many TramitacaoDocumentos
     * const tramitacaoDocumento = await prisma.tramitacaoDocumento.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TramitacaoDocumentoCreateManyArgs>(args?: SelectSubset<T, TramitacaoDocumentoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TramitacaoDocumento.
     * @param {TramitacaoDocumentoDeleteArgs} args - Arguments to delete one TramitacaoDocumento.
     * @example
     * // Delete one TramitacaoDocumento
     * const TramitacaoDocumento = await prisma.tramitacaoDocumento.delete({
     *   where: {
     *     // ... filter to delete one TramitacaoDocumento
     *   }
     * })
     * 
     */
    delete<T extends TramitacaoDocumentoDeleteArgs>(args: SelectSubset<T, TramitacaoDocumentoDeleteArgs<ExtArgs>>): Prisma__TramitacaoDocumentoClient<$Result.GetResult<Prisma.$TramitacaoDocumentoPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one TramitacaoDocumento.
     * @param {TramitacaoDocumentoUpdateArgs} args - Arguments to update one TramitacaoDocumento.
     * @example
     * // Update one TramitacaoDocumento
     * const tramitacaoDocumento = await prisma.tramitacaoDocumento.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TramitacaoDocumentoUpdateArgs>(args: SelectSubset<T, TramitacaoDocumentoUpdateArgs<ExtArgs>>): Prisma__TramitacaoDocumentoClient<$Result.GetResult<Prisma.$TramitacaoDocumentoPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more TramitacaoDocumentos.
     * @param {TramitacaoDocumentoDeleteManyArgs} args - Arguments to filter TramitacaoDocumentos to delete.
     * @example
     * // Delete a few TramitacaoDocumentos
     * const { count } = await prisma.tramitacaoDocumento.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TramitacaoDocumentoDeleteManyArgs>(args?: SelectSubset<T, TramitacaoDocumentoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TramitacaoDocumentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TramitacaoDocumentoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TramitacaoDocumentos
     * const tramitacaoDocumento = await prisma.tramitacaoDocumento.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TramitacaoDocumentoUpdateManyArgs>(args: SelectSubset<T, TramitacaoDocumentoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TramitacaoDocumento.
     * @param {TramitacaoDocumentoUpsertArgs} args - Arguments to update or create a TramitacaoDocumento.
     * @example
     * // Update or create a TramitacaoDocumento
     * const tramitacaoDocumento = await prisma.tramitacaoDocumento.upsert({
     *   create: {
     *     // ... data to create a TramitacaoDocumento
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TramitacaoDocumento we want to update
     *   }
     * })
     */
    upsert<T extends TramitacaoDocumentoUpsertArgs>(args: SelectSubset<T, TramitacaoDocumentoUpsertArgs<ExtArgs>>): Prisma__TramitacaoDocumentoClient<$Result.GetResult<Prisma.$TramitacaoDocumentoPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of TramitacaoDocumentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TramitacaoDocumentoCountArgs} args - Arguments to filter TramitacaoDocumentos to count.
     * @example
     * // Count the number of TramitacaoDocumentos
     * const count = await prisma.tramitacaoDocumento.count({
     *   where: {
     *     // ... the filter for the TramitacaoDocumentos we want to count
     *   }
     * })
    **/
    count<T extends TramitacaoDocumentoCountArgs>(
      args?: Subset<T, TramitacaoDocumentoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TramitacaoDocumentoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TramitacaoDocumento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TramitacaoDocumentoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TramitacaoDocumentoAggregateArgs>(args: Subset<T, TramitacaoDocumentoAggregateArgs>): Prisma.PrismaPromise<GetTramitacaoDocumentoAggregateType<T>>

    /**
     * Group by TramitacaoDocumento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TramitacaoDocumentoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TramitacaoDocumentoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TramitacaoDocumentoGroupByArgs['orderBy'] }
        : { orderBy?: TramitacaoDocumentoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TramitacaoDocumentoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTramitacaoDocumentoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TramitacaoDocumento model
   */
  readonly fields: TramitacaoDocumentoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TramitacaoDocumento.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TramitacaoDocumentoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    documento<T extends DocumentoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DocumentoDefaultArgs<ExtArgs>>): Prisma__DocumentoClient<$Result.GetResult<Prisma.$DocumentoPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    setorEnvio<T extends SetorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SetorDefaultArgs<ExtArgs>>): Prisma__SetorClient<$Result.GetResult<Prisma.$SetorPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    setorRecebe<T extends SetorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SetorDefaultArgs<ExtArgs>>): Prisma__SetorClient<$Result.GetResult<Prisma.$SetorPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TramitacaoDocumento model
   */ 
  interface TramitacaoDocumentoFieldRefs {
    readonly id: FieldRef<"TramitacaoDocumento", 'Int'>
    readonly documentoId: FieldRef<"TramitacaoDocumento", 'Int'>
    readonly setorEnvioId: FieldRef<"TramitacaoDocumento", 'Int'>
    readonly setorRecebeId: FieldRef<"TramitacaoDocumento", 'Int'>
    readonly recebido: FieldRef<"TramitacaoDocumento", 'Boolean'>
    readonly createdAt: FieldRef<"TramitacaoDocumento", 'DateTime'>
    readonly updatedAt: FieldRef<"TramitacaoDocumento", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TramitacaoDocumento findUnique
   */
  export type TramitacaoDocumentoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TramitacaoDocumento
     */
    select?: TramitacaoDocumentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TramitacaoDocumento
     */
    omit?: TramitacaoDocumentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TramitacaoDocumentoInclude<ExtArgs> | null
    /**
     * Filter, which TramitacaoDocumento to fetch.
     */
    where: TramitacaoDocumentoWhereUniqueInput
  }

  /**
   * TramitacaoDocumento findUniqueOrThrow
   */
  export type TramitacaoDocumentoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TramitacaoDocumento
     */
    select?: TramitacaoDocumentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TramitacaoDocumento
     */
    omit?: TramitacaoDocumentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TramitacaoDocumentoInclude<ExtArgs> | null
    /**
     * Filter, which TramitacaoDocumento to fetch.
     */
    where: TramitacaoDocumentoWhereUniqueInput
  }

  /**
   * TramitacaoDocumento findFirst
   */
  export type TramitacaoDocumentoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TramitacaoDocumento
     */
    select?: TramitacaoDocumentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TramitacaoDocumento
     */
    omit?: TramitacaoDocumentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TramitacaoDocumentoInclude<ExtArgs> | null
    /**
     * Filter, which TramitacaoDocumento to fetch.
     */
    where?: TramitacaoDocumentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TramitacaoDocumentos to fetch.
     */
    orderBy?: TramitacaoDocumentoOrderByWithRelationInput | TramitacaoDocumentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TramitacaoDocumentos.
     */
    cursor?: TramitacaoDocumentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TramitacaoDocumentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TramitacaoDocumentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TramitacaoDocumentos.
     */
    distinct?: TramitacaoDocumentoScalarFieldEnum | TramitacaoDocumentoScalarFieldEnum[]
  }

  /**
   * TramitacaoDocumento findFirstOrThrow
   */
  export type TramitacaoDocumentoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TramitacaoDocumento
     */
    select?: TramitacaoDocumentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TramitacaoDocumento
     */
    omit?: TramitacaoDocumentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TramitacaoDocumentoInclude<ExtArgs> | null
    /**
     * Filter, which TramitacaoDocumento to fetch.
     */
    where?: TramitacaoDocumentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TramitacaoDocumentos to fetch.
     */
    orderBy?: TramitacaoDocumentoOrderByWithRelationInput | TramitacaoDocumentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TramitacaoDocumentos.
     */
    cursor?: TramitacaoDocumentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TramitacaoDocumentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TramitacaoDocumentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TramitacaoDocumentos.
     */
    distinct?: TramitacaoDocumentoScalarFieldEnum | TramitacaoDocumentoScalarFieldEnum[]
  }

  /**
   * TramitacaoDocumento findMany
   */
  export type TramitacaoDocumentoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TramitacaoDocumento
     */
    select?: TramitacaoDocumentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TramitacaoDocumento
     */
    omit?: TramitacaoDocumentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TramitacaoDocumentoInclude<ExtArgs> | null
    /**
     * Filter, which TramitacaoDocumentos to fetch.
     */
    where?: TramitacaoDocumentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TramitacaoDocumentos to fetch.
     */
    orderBy?: TramitacaoDocumentoOrderByWithRelationInput | TramitacaoDocumentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TramitacaoDocumentos.
     */
    cursor?: TramitacaoDocumentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TramitacaoDocumentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TramitacaoDocumentos.
     */
    skip?: number
    distinct?: TramitacaoDocumentoScalarFieldEnum | TramitacaoDocumentoScalarFieldEnum[]
  }

  /**
   * TramitacaoDocumento create
   */
  export type TramitacaoDocumentoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TramitacaoDocumento
     */
    select?: TramitacaoDocumentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TramitacaoDocumento
     */
    omit?: TramitacaoDocumentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TramitacaoDocumentoInclude<ExtArgs> | null
    /**
     * The data needed to create a TramitacaoDocumento.
     */
    data: XOR<TramitacaoDocumentoCreateInput, TramitacaoDocumentoUncheckedCreateInput>
  }

  /**
   * TramitacaoDocumento createMany
   */
  export type TramitacaoDocumentoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TramitacaoDocumentos.
     */
    data: TramitacaoDocumentoCreateManyInput | TramitacaoDocumentoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TramitacaoDocumento update
   */
  export type TramitacaoDocumentoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TramitacaoDocumento
     */
    select?: TramitacaoDocumentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TramitacaoDocumento
     */
    omit?: TramitacaoDocumentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TramitacaoDocumentoInclude<ExtArgs> | null
    /**
     * The data needed to update a TramitacaoDocumento.
     */
    data: XOR<TramitacaoDocumentoUpdateInput, TramitacaoDocumentoUncheckedUpdateInput>
    /**
     * Choose, which TramitacaoDocumento to update.
     */
    where: TramitacaoDocumentoWhereUniqueInput
  }

  /**
   * TramitacaoDocumento updateMany
   */
  export type TramitacaoDocumentoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TramitacaoDocumentos.
     */
    data: XOR<TramitacaoDocumentoUpdateManyMutationInput, TramitacaoDocumentoUncheckedUpdateManyInput>
    /**
     * Filter which TramitacaoDocumentos to update
     */
    where?: TramitacaoDocumentoWhereInput
    /**
     * Limit how many TramitacaoDocumentos to update.
     */
    limit?: number
  }

  /**
   * TramitacaoDocumento upsert
   */
  export type TramitacaoDocumentoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TramitacaoDocumento
     */
    select?: TramitacaoDocumentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TramitacaoDocumento
     */
    omit?: TramitacaoDocumentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TramitacaoDocumentoInclude<ExtArgs> | null
    /**
     * The filter to search for the TramitacaoDocumento to update in case it exists.
     */
    where: TramitacaoDocumentoWhereUniqueInput
    /**
     * In case the TramitacaoDocumento found by the `where` argument doesn't exist, create a new TramitacaoDocumento with this data.
     */
    create: XOR<TramitacaoDocumentoCreateInput, TramitacaoDocumentoUncheckedCreateInput>
    /**
     * In case the TramitacaoDocumento was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TramitacaoDocumentoUpdateInput, TramitacaoDocumentoUncheckedUpdateInput>
  }

  /**
   * TramitacaoDocumento delete
   */
  export type TramitacaoDocumentoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TramitacaoDocumento
     */
    select?: TramitacaoDocumentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TramitacaoDocumento
     */
    omit?: TramitacaoDocumentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TramitacaoDocumentoInclude<ExtArgs> | null
    /**
     * Filter which TramitacaoDocumento to delete.
     */
    where: TramitacaoDocumentoWhereUniqueInput
  }

  /**
   * TramitacaoDocumento deleteMany
   */
  export type TramitacaoDocumentoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TramitacaoDocumentos to delete
     */
    where?: TramitacaoDocumentoWhereInput
    /**
     * Limit how many TramitacaoDocumentos to delete.
     */
    limit?: number
  }

  /**
   * TramitacaoDocumento without action
   */
  export type TramitacaoDocumentoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TramitacaoDocumento
     */
    select?: TramitacaoDocumentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TramitacaoDocumento
     */
    omit?: TramitacaoDocumentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TramitacaoDocumentoInclude<ExtArgs> | null
  }


  /**
   * Model Documento
   */

  export type AggregateDocumento = {
    _count: DocumentoCountAggregateOutputType | null
    _avg: DocumentoAvgAggregateOutputType | null
    _sum: DocumentoSumAggregateOutputType | null
    _min: DocumentoMinAggregateOutputType | null
    _max: DocumentoMaxAggregateOutputType | null
  }

  export type DocumentoAvgAggregateOutputType = {
    id: number | null
    tipoDocumentoId: number | null
  }

  export type DocumentoSumAggregateOutputType = {
    id: number | null
    tipoDocumentoId: number | null
  }

  export type DocumentoMinAggregateOutputType = {
    id: number | null
    numero: string | null
    titulo: string | null
    descricao: string | null
    dataCadastro: Date | null
    arquivo: string | null
    tipoDocumentoId: number | null
  }

  export type DocumentoMaxAggregateOutputType = {
    id: number | null
    numero: string | null
    titulo: string | null
    descricao: string | null
    dataCadastro: Date | null
    arquivo: string | null
    tipoDocumentoId: number | null
  }

  export type DocumentoCountAggregateOutputType = {
    id: number
    numero: number
    titulo: number
    descricao: number
    dataCadastro: number
    arquivo: number
    tipoDocumentoId: number
    _all: number
  }


  export type DocumentoAvgAggregateInputType = {
    id?: true
    tipoDocumentoId?: true
  }

  export type DocumentoSumAggregateInputType = {
    id?: true
    tipoDocumentoId?: true
  }

  export type DocumentoMinAggregateInputType = {
    id?: true
    numero?: true
    titulo?: true
    descricao?: true
    dataCadastro?: true
    arquivo?: true
    tipoDocumentoId?: true
  }

  export type DocumentoMaxAggregateInputType = {
    id?: true
    numero?: true
    titulo?: true
    descricao?: true
    dataCadastro?: true
    arquivo?: true
    tipoDocumentoId?: true
  }

  export type DocumentoCountAggregateInputType = {
    id?: true
    numero?: true
    titulo?: true
    descricao?: true
    dataCadastro?: true
    arquivo?: true
    tipoDocumentoId?: true
    _all?: true
  }

  export type DocumentoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Documento to aggregate.
     */
    where?: DocumentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documentos to fetch.
     */
    orderBy?: DocumentoOrderByWithRelationInput | DocumentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DocumentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Documentos
    **/
    _count?: true | DocumentoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DocumentoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DocumentoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentoMaxAggregateInputType
  }

  export type GetDocumentoAggregateType<T extends DocumentoAggregateArgs> = {
        [P in keyof T & keyof AggregateDocumento]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocumento[P]>
      : GetScalarType<T[P], AggregateDocumento[P]>
  }




  export type DocumentoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentoWhereInput
    orderBy?: DocumentoOrderByWithAggregationInput | DocumentoOrderByWithAggregationInput[]
    by: DocumentoScalarFieldEnum[] | DocumentoScalarFieldEnum
    having?: DocumentoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentoCountAggregateInputType | true
    _avg?: DocumentoAvgAggregateInputType
    _sum?: DocumentoSumAggregateInputType
    _min?: DocumentoMinAggregateInputType
    _max?: DocumentoMaxAggregateInputType
  }

  export type DocumentoGroupByOutputType = {
    id: number
    numero: string
    titulo: string
    descricao: string
    dataCadastro: Date
    arquivo: string
    tipoDocumentoId: number
    _count: DocumentoCountAggregateOutputType | null
    _avg: DocumentoAvgAggregateOutputType | null
    _sum: DocumentoSumAggregateOutputType | null
    _min: DocumentoMinAggregateOutputType | null
    _max: DocumentoMaxAggregateOutputType | null
  }

  type GetDocumentoGroupByPayload<T extends DocumentoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DocumentoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentoGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentoGroupByOutputType[P]>
        }
      >
    >


  export type DocumentoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    numero?: boolean
    titulo?: boolean
    descricao?: boolean
    dataCadastro?: boolean
    arquivo?: boolean
    tipoDocumentoId?: boolean
    tipoDocumento?: boolean | TipoDocumentoDefaultArgs<ExtArgs>
    tramitacoes?: boolean | Documento$tramitacoesArgs<ExtArgs>
    _count?: boolean | DocumentoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["documento"]>



  export type DocumentoSelectScalar = {
    id?: boolean
    numero?: boolean
    titulo?: boolean
    descricao?: boolean
    dataCadastro?: boolean
    arquivo?: boolean
    tipoDocumentoId?: boolean
  }

  export type DocumentoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "numero" | "titulo" | "descricao" | "dataCadastro" | "arquivo" | "tipoDocumentoId", ExtArgs["result"]["documento"]>
  export type DocumentoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tipoDocumento?: boolean | TipoDocumentoDefaultArgs<ExtArgs>
    tramitacoes?: boolean | Documento$tramitacoesArgs<ExtArgs>
    _count?: boolean | DocumentoCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $DocumentoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Documento"
    objects: {
      tipoDocumento: Prisma.$TipoDocumentoPayload<ExtArgs>
      tramitacoes: Prisma.$TramitacaoDocumentoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      numero: string
      titulo: string
      descricao: string
      dataCadastro: Date
      arquivo: string
      tipoDocumentoId: number
    }, ExtArgs["result"]["documento"]>
    composites: {}
  }

  type DocumentoGetPayload<S extends boolean | null | undefined | DocumentoDefaultArgs> = $Result.GetResult<Prisma.$DocumentoPayload, S>

  type DocumentoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DocumentoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DocumentoCountAggregateInputType | true
    }

  export interface DocumentoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Documento'], meta: { name: 'Documento' } }
    /**
     * Find zero or one Documento that matches the filter.
     * @param {DocumentoFindUniqueArgs} args - Arguments to find a Documento
     * @example
     * // Get one Documento
     * const documento = await prisma.documento.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DocumentoFindUniqueArgs>(args: SelectSubset<T, DocumentoFindUniqueArgs<ExtArgs>>): Prisma__DocumentoClient<$Result.GetResult<Prisma.$DocumentoPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Documento that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DocumentoFindUniqueOrThrowArgs} args - Arguments to find a Documento
     * @example
     * // Get one Documento
     * const documento = await prisma.documento.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DocumentoFindUniqueOrThrowArgs>(args: SelectSubset<T, DocumentoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DocumentoClient<$Result.GetResult<Prisma.$DocumentoPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Documento that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentoFindFirstArgs} args - Arguments to find a Documento
     * @example
     * // Get one Documento
     * const documento = await prisma.documento.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DocumentoFindFirstArgs>(args?: SelectSubset<T, DocumentoFindFirstArgs<ExtArgs>>): Prisma__DocumentoClient<$Result.GetResult<Prisma.$DocumentoPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Documento that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentoFindFirstOrThrowArgs} args - Arguments to find a Documento
     * @example
     * // Get one Documento
     * const documento = await prisma.documento.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DocumentoFindFirstOrThrowArgs>(args?: SelectSubset<T, DocumentoFindFirstOrThrowArgs<ExtArgs>>): Prisma__DocumentoClient<$Result.GetResult<Prisma.$DocumentoPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Documentos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Documentos
     * const documentos = await prisma.documento.findMany()
     * 
     * // Get first 10 Documentos
     * const documentos = await prisma.documento.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const documentoWithIdOnly = await prisma.documento.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DocumentoFindManyArgs>(args?: SelectSubset<T, DocumentoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentoPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Documento.
     * @param {DocumentoCreateArgs} args - Arguments to create a Documento.
     * @example
     * // Create one Documento
     * const Documento = await prisma.documento.create({
     *   data: {
     *     // ... data to create a Documento
     *   }
     * })
     * 
     */
    create<T extends DocumentoCreateArgs>(args: SelectSubset<T, DocumentoCreateArgs<ExtArgs>>): Prisma__DocumentoClient<$Result.GetResult<Prisma.$DocumentoPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Documentos.
     * @param {DocumentoCreateManyArgs} args - Arguments to create many Documentos.
     * @example
     * // Create many Documentos
     * const documento = await prisma.documento.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DocumentoCreateManyArgs>(args?: SelectSubset<T, DocumentoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Documento.
     * @param {DocumentoDeleteArgs} args - Arguments to delete one Documento.
     * @example
     * // Delete one Documento
     * const Documento = await prisma.documento.delete({
     *   where: {
     *     // ... filter to delete one Documento
     *   }
     * })
     * 
     */
    delete<T extends DocumentoDeleteArgs>(args: SelectSubset<T, DocumentoDeleteArgs<ExtArgs>>): Prisma__DocumentoClient<$Result.GetResult<Prisma.$DocumentoPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Documento.
     * @param {DocumentoUpdateArgs} args - Arguments to update one Documento.
     * @example
     * // Update one Documento
     * const documento = await prisma.documento.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DocumentoUpdateArgs>(args: SelectSubset<T, DocumentoUpdateArgs<ExtArgs>>): Prisma__DocumentoClient<$Result.GetResult<Prisma.$DocumentoPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Documentos.
     * @param {DocumentoDeleteManyArgs} args - Arguments to filter Documentos to delete.
     * @example
     * // Delete a few Documentos
     * const { count } = await prisma.documento.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DocumentoDeleteManyArgs>(args?: SelectSubset<T, DocumentoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Documentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Documentos
     * const documento = await prisma.documento.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DocumentoUpdateManyArgs>(args: SelectSubset<T, DocumentoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Documento.
     * @param {DocumentoUpsertArgs} args - Arguments to update or create a Documento.
     * @example
     * // Update or create a Documento
     * const documento = await prisma.documento.upsert({
     *   create: {
     *     // ... data to create a Documento
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Documento we want to update
     *   }
     * })
     */
    upsert<T extends DocumentoUpsertArgs>(args: SelectSubset<T, DocumentoUpsertArgs<ExtArgs>>): Prisma__DocumentoClient<$Result.GetResult<Prisma.$DocumentoPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Documentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentoCountArgs} args - Arguments to filter Documentos to count.
     * @example
     * // Count the number of Documentos
     * const count = await prisma.documento.count({
     *   where: {
     *     // ... the filter for the Documentos we want to count
     *   }
     * })
    **/
    count<T extends DocumentoCountArgs>(
      args?: Subset<T, DocumentoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Documento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentoAggregateArgs>(args: Subset<T, DocumentoAggregateArgs>): Prisma.PrismaPromise<GetDocumentoAggregateType<T>>

    /**
     * Group by Documento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DocumentoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DocumentoGroupByArgs['orderBy'] }
        : { orderBy?: DocumentoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DocumentoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Documento model
   */
  readonly fields: DocumentoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Documento.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DocumentoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tipoDocumento<T extends TipoDocumentoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TipoDocumentoDefaultArgs<ExtArgs>>): Prisma__TipoDocumentoClient<$Result.GetResult<Prisma.$TipoDocumentoPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    tramitacoes<T extends Documento$tramitacoesArgs<ExtArgs> = {}>(args?: Subset<T, Documento$tramitacoesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TramitacaoDocumentoPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Documento model
   */ 
  interface DocumentoFieldRefs {
    readonly id: FieldRef<"Documento", 'Int'>
    readonly numero: FieldRef<"Documento", 'String'>
    readonly titulo: FieldRef<"Documento", 'String'>
    readonly descricao: FieldRef<"Documento", 'String'>
    readonly dataCadastro: FieldRef<"Documento", 'DateTime'>
    readonly arquivo: FieldRef<"Documento", 'String'>
    readonly tipoDocumentoId: FieldRef<"Documento", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Documento findUnique
   */
  export type DocumentoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Documento
     */
    omit?: DocumentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoInclude<ExtArgs> | null
    /**
     * Filter, which Documento to fetch.
     */
    where: DocumentoWhereUniqueInput
  }

  /**
   * Documento findUniqueOrThrow
   */
  export type DocumentoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Documento
     */
    omit?: DocumentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoInclude<ExtArgs> | null
    /**
     * Filter, which Documento to fetch.
     */
    where: DocumentoWhereUniqueInput
  }

  /**
   * Documento findFirst
   */
  export type DocumentoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Documento
     */
    omit?: DocumentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoInclude<ExtArgs> | null
    /**
     * Filter, which Documento to fetch.
     */
    where?: DocumentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documentos to fetch.
     */
    orderBy?: DocumentoOrderByWithRelationInput | DocumentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documentos.
     */
    cursor?: DocumentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documentos.
     */
    distinct?: DocumentoScalarFieldEnum | DocumentoScalarFieldEnum[]
  }

  /**
   * Documento findFirstOrThrow
   */
  export type DocumentoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Documento
     */
    omit?: DocumentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoInclude<ExtArgs> | null
    /**
     * Filter, which Documento to fetch.
     */
    where?: DocumentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documentos to fetch.
     */
    orderBy?: DocumentoOrderByWithRelationInput | DocumentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documentos.
     */
    cursor?: DocumentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documentos.
     */
    distinct?: DocumentoScalarFieldEnum | DocumentoScalarFieldEnum[]
  }

  /**
   * Documento findMany
   */
  export type DocumentoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Documento
     */
    omit?: DocumentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoInclude<ExtArgs> | null
    /**
     * Filter, which Documentos to fetch.
     */
    where?: DocumentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documentos to fetch.
     */
    orderBy?: DocumentoOrderByWithRelationInput | DocumentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Documentos.
     */
    cursor?: DocumentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documentos.
     */
    skip?: number
    distinct?: DocumentoScalarFieldEnum | DocumentoScalarFieldEnum[]
  }

  /**
   * Documento create
   */
  export type DocumentoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Documento
     */
    omit?: DocumentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoInclude<ExtArgs> | null
    /**
     * The data needed to create a Documento.
     */
    data: XOR<DocumentoCreateInput, DocumentoUncheckedCreateInput>
  }

  /**
   * Documento createMany
   */
  export type DocumentoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Documentos.
     */
    data: DocumentoCreateManyInput | DocumentoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Documento update
   */
  export type DocumentoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Documento
     */
    omit?: DocumentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoInclude<ExtArgs> | null
    /**
     * The data needed to update a Documento.
     */
    data: XOR<DocumentoUpdateInput, DocumentoUncheckedUpdateInput>
    /**
     * Choose, which Documento to update.
     */
    where: DocumentoWhereUniqueInput
  }

  /**
   * Documento updateMany
   */
  export type DocumentoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Documentos.
     */
    data: XOR<DocumentoUpdateManyMutationInput, DocumentoUncheckedUpdateManyInput>
    /**
     * Filter which Documentos to update
     */
    where?: DocumentoWhereInput
    /**
     * Limit how many Documentos to update.
     */
    limit?: number
  }

  /**
   * Documento upsert
   */
  export type DocumentoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Documento
     */
    omit?: DocumentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoInclude<ExtArgs> | null
    /**
     * The filter to search for the Documento to update in case it exists.
     */
    where: DocumentoWhereUniqueInput
    /**
     * In case the Documento found by the `where` argument doesn't exist, create a new Documento with this data.
     */
    create: XOR<DocumentoCreateInput, DocumentoUncheckedCreateInput>
    /**
     * In case the Documento was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DocumentoUpdateInput, DocumentoUncheckedUpdateInput>
  }

  /**
   * Documento delete
   */
  export type DocumentoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Documento
     */
    omit?: DocumentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoInclude<ExtArgs> | null
    /**
     * Filter which Documento to delete.
     */
    where: DocumentoWhereUniqueInput
  }

  /**
   * Documento deleteMany
   */
  export type DocumentoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Documentos to delete
     */
    where?: DocumentoWhereInput
    /**
     * Limit how many Documentos to delete.
     */
    limit?: number
  }

  /**
   * Documento.tramitacoes
   */
  export type Documento$tramitacoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TramitacaoDocumento
     */
    select?: TramitacaoDocumentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TramitacaoDocumento
     */
    omit?: TramitacaoDocumentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TramitacaoDocumentoInclude<ExtArgs> | null
    where?: TramitacaoDocumentoWhereInput
    orderBy?: TramitacaoDocumentoOrderByWithRelationInput | TramitacaoDocumentoOrderByWithRelationInput[]
    cursor?: TramitacaoDocumentoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TramitacaoDocumentoScalarFieldEnum | TramitacaoDocumentoScalarFieldEnum[]
  }

  /**
   * Documento without action
   */
  export type DocumentoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Documento
     */
    omit?: DocumentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoInclude<ExtArgs> | null
  }


  /**
   * Model TipoDocumento
   */

  export type AggregateTipoDocumento = {
    _count: TipoDocumentoCountAggregateOutputType | null
    _avg: TipoDocumentoAvgAggregateOutputType | null
    _sum: TipoDocumentoSumAggregateOutputType | null
    _min: TipoDocumentoMinAggregateOutputType | null
    _max: TipoDocumentoMaxAggregateOutputType | null
  }

  export type TipoDocumentoAvgAggregateOutputType = {
    id: number | null
  }

  export type TipoDocumentoSumAggregateOutputType = {
    id: number | null
  }

  export type TipoDocumentoMinAggregateOutputType = {
    id: number | null
    descricao: string | null
  }

  export type TipoDocumentoMaxAggregateOutputType = {
    id: number | null
    descricao: string | null
  }

  export type TipoDocumentoCountAggregateOutputType = {
    id: number
    descricao: number
    _all: number
  }


  export type TipoDocumentoAvgAggregateInputType = {
    id?: true
  }

  export type TipoDocumentoSumAggregateInputType = {
    id?: true
  }

  export type TipoDocumentoMinAggregateInputType = {
    id?: true
    descricao?: true
  }

  export type TipoDocumentoMaxAggregateInputType = {
    id?: true
    descricao?: true
  }

  export type TipoDocumentoCountAggregateInputType = {
    id?: true
    descricao?: true
    _all?: true
  }

  export type TipoDocumentoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TipoDocumento to aggregate.
     */
    where?: TipoDocumentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TipoDocumentos to fetch.
     */
    orderBy?: TipoDocumentoOrderByWithRelationInput | TipoDocumentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TipoDocumentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TipoDocumentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TipoDocumentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TipoDocumentos
    **/
    _count?: true | TipoDocumentoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TipoDocumentoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TipoDocumentoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TipoDocumentoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TipoDocumentoMaxAggregateInputType
  }

  export type GetTipoDocumentoAggregateType<T extends TipoDocumentoAggregateArgs> = {
        [P in keyof T & keyof AggregateTipoDocumento]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTipoDocumento[P]>
      : GetScalarType<T[P], AggregateTipoDocumento[P]>
  }




  export type TipoDocumentoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TipoDocumentoWhereInput
    orderBy?: TipoDocumentoOrderByWithAggregationInput | TipoDocumentoOrderByWithAggregationInput[]
    by: TipoDocumentoScalarFieldEnum[] | TipoDocumentoScalarFieldEnum
    having?: TipoDocumentoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TipoDocumentoCountAggregateInputType | true
    _avg?: TipoDocumentoAvgAggregateInputType
    _sum?: TipoDocumentoSumAggregateInputType
    _min?: TipoDocumentoMinAggregateInputType
    _max?: TipoDocumentoMaxAggregateInputType
  }

  export type TipoDocumentoGroupByOutputType = {
    id: number
    descricao: string
    _count: TipoDocumentoCountAggregateOutputType | null
    _avg: TipoDocumentoAvgAggregateOutputType | null
    _sum: TipoDocumentoSumAggregateOutputType | null
    _min: TipoDocumentoMinAggregateOutputType | null
    _max: TipoDocumentoMaxAggregateOutputType | null
  }

  type GetTipoDocumentoGroupByPayload<T extends TipoDocumentoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TipoDocumentoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TipoDocumentoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TipoDocumentoGroupByOutputType[P]>
            : GetScalarType<T[P], TipoDocumentoGroupByOutputType[P]>
        }
      >
    >


  export type TipoDocumentoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    descricao?: boolean
    documentos?: boolean | TipoDocumento$documentosArgs<ExtArgs>
    _count?: boolean | TipoDocumentoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tipoDocumento"]>



  export type TipoDocumentoSelectScalar = {
    id?: boolean
    descricao?: boolean
  }

  export type TipoDocumentoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "descricao", ExtArgs["result"]["tipoDocumento"]>
  export type TipoDocumentoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documentos?: boolean | TipoDocumento$documentosArgs<ExtArgs>
    _count?: boolean | TipoDocumentoCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $TipoDocumentoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TipoDocumento"
    objects: {
      documentos: Prisma.$DocumentoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      descricao: string
    }, ExtArgs["result"]["tipoDocumento"]>
    composites: {}
  }

  type TipoDocumentoGetPayload<S extends boolean | null | undefined | TipoDocumentoDefaultArgs> = $Result.GetResult<Prisma.$TipoDocumentoPayload, S>

  type TipoDocumentoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TipoDocumentoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TipoDocumentoCountAggregateInputType | true
    }

  export interface TipoDocumentoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TipoDocumento'], meta: { name: 'TipoDocumento' } }
    /**
     * Find zero or one TipoDocumento that matches the filter.
     * @param {TipoDocumentoFindUniqueArgs} args - Arguments to find a TipoDocumento
     * @example
     * // Get one TipoDocumento
     * const tipoDocumento = await prisma.tipoDocumento.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TipoDocumentoFindUniqueArgs>(args: SelectSubset<T, TipoDocumentoFindUniqueArgs<ExtArgs>>): Prisma__TipoDocumentoClient<$Result.GetResult<Prisma.$TipoDocumentoPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one TipoDocumento that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TipoDocumentoFindUniqueOrThrowArgs} args - Arguments to find a TipoDocumento
     * @example
     * // Get one TipoDocumento
     * const tipoDocumento = await prisma.tipoDocumento.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TipoDocumentoFindUniqueOrThrowArgs>(args: SelectSubset<T, TipoDocumentoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TipoDocumentoClient<$Result.GetResult<Prisma.$TipoDocumentoPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first TipoDocumento that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoDocumentoFindFirstArgs} args - Arguments to find a TipoDocumento
     * @example
     * // Get one TipoDocumento
     * const tipoDocumento = await prisma.tipoDocumento.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TipoDocumentoFindFirstArgs>(args?: SelectSubset<T, TipoDocumentoFindFirstArgs<ExtArgs>>): Prisma__TipoDocumentoClient<$Result.GetResult<Prisma.$TipoDocumentoPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first TipoDocumento that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoDocumentoFindFirstOrThrowArgs} args - Arguments to find a TipoDocumento
     * @example
     * // Get one TipoDocumento
     * const tipoDocumento = await prisma.tipoDocumento.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TipoDocumentoFindFirstOrThrowArgs>(args?: SelectSubset<T, TipoDocumentoFindFirstOrThrowArgs<ExtArgs>>): Prisma__TipoDocumentoClient<$Result.GetResult<Prisma.$TipoDocumentoPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more TipoDocumentos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoDocumentoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TipoDocumentos
     * const tipoDocumentos = await prisma.tipoDocumento.findMany()
     * 
     * // Get first 10 TipoDocumentos
     * const tipoDocumentos = await prisma.tipoDocumento.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tipoDocumentoWithIdOnly = await prisma.tipoDocumento.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TipoDocumentoFindManyArgs>(args?: SelectSubset<T, TipoDocumentoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TipoDocumentoPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a TipoDocumento.
     * @param {TipoDocumentoCreateArgs} args - Arguments to create a TipoDocumento.
     * @example
     * // Create one TipoDocumento
     * const TipoDocumento = await prisma.tipoDocumento.create({
     *   data: {
     *     // ... data to create a TipoDocumento
     *   }
     * })
     * 
     */
    create<T extends TipoDocumentoCreateArgs>(args: SelectSubset<T, TipoDocumentoCreateArgs<ExtArgs>>): Prisma__TipoDocumentoClient<$Result.GetResult<Prisma.$TipoDocumentoPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many TipoDocumentos.
     * @param {TipoDocumentoCreateManyArgs} args - Arguments to create many TipoDocumentos.
     * @example
     * // Create many TipoDocumentos
     * const tipoDocumento = await prisma.tipoDocumento.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TipoDocumentoCreateManyArgs>(args?: SelectSubset<T, TipoDocumentoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TipoDocumento.
     * @param {TipoDocumentoDeleteArgs} args - Arguments to delete one TipoDocumento.
     * @example
     * // Delete one TipoDocumento
     * const TipoDocumento = await prisma.tipoDocumento.delete({
     *   where: {
     *     // ... filter to delete one TipoDocumento
     *   }
     * })
     * 
     */
    delete<T extends TipoDocumentoDeleteArgs>(args: SelectSubset<T, TipoDocumentoDeleteArgs<ExtArgs>>): Prisma__TipoDocumentoClient<$Result.GetResult<Prisma.$TipoDocumentoPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one TipoDocumento.
     * @param {TipoDocumentoUpdateArgs} args - Arguments to update one TipoDocumento.
     * @example
     * // Update one TipoDocumento
     * const tipoDocumento = await prisma.tipoDocumento.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TipoDocumentoUpdateArgs>(args: SelectSubset<T, TipoDocumentoUpdateArgs<ExtArgs>>): Prisma__TipoDocumentoClient<$Result.GetResult<Prisma.$TipoDocumentoPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more TipoDocumentos.
     * @param {TipoDocumentoDeleteManyArgs} args - Arguments to filter TipoDocumentos to delete.
     * @example
     * // Delete a few TipoDocumentos
     * const { count } = await prisma.tipoDocumento.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TipoDocumentoDeleteManyArgs>(args?: SelectSubset<T, TipoDocumentoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TipoDocumentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoDocumentoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TipoDocumentos
     * const tipoDocumento = await prisma.tipoDocumento.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TipoDocumentoUpdateManyArgs>(args: SelectSubset<T, TipoDocumentoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TipoDocumento.
     * @param {TipoDocumentoUpsertArgs} args - Arguments to update or create a TipoDocumento.
     * @example
     * // Update or create a TipoDocumento
     * const tipoDocumento = await prisma.tipoDocumento.upsert({
     *   create: {
     *     // ... data to create a TipoDocumento
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TipoDocumento we want to update
     *   }
     * })
     */
    upsert<T extends TipoDocumentoUpsertArgs>(args: SelectSubset<T, TipoDocumentoUpsertArgs<ExtArgs>>): Prisma__TipoDocumentoClient<$Result.GetResult<Prisma.$TipoDocumentoPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of TipoDocumentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoDocumentoCountArgs} args - Arguments to filter TipoDocumentos to count.
     * @example
     * // Count the number of TipoDocumentos
     * const count = await prisma.tipoDocumento.count({
     *   where: {
     *     // ... the filter for the TipoDocumentos we want to count
     *   }
     * })
    **/
    count<T extends TipoDocumentoCountArgs>(
      args?: Subset<T, TipoDocumentoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TipoDocumentoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TipoDocumento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoDocumentoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TipoDocumentoAggregateArgs>(args: Subset<T, TipoDocumentoAggregateArgs>): Prisma.PrismaPromise<GetTipoDocumentoAggregateType<T>>

    /**
     * Group by TipoDocumento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoDocumentoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TipoDocumentoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TipoDocumentoGroupByArgs['orderBy'] }
        : { orderBy?: TipoDocumentoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TipoDocumentoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTipoDocumentoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TipoDocumento model
   */
  readonly fields: TipoDocumentoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TipoDocumento.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TipoDocumentoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    documentos<T extends TipoDocumento$documentosArgs<ExtArgs> = {}>(args?: Subset<T, TipoDocumento$documentosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentoPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TipoDocumento model
   */ 
  interface TipoDocumentoFieldRefs {
    readonly id: FieldRef<"TipoDocumento", 'Int'>
    readonly descricao: FieldRef<"TipoDocumento", 'String'>
  }
    

  // Custom InputTypes
  /**
   * TipoDocumento findUnique
   */
  export type TipoDocumentoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoDocumento
     */
    select?: TipoDocumentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TipoDocumento
     */
    omit?: TipoDocumentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoDocumentoInclude<ExtArgs> | null
    /**
     * Filter, which TipoDocumento to fetch.
     */
    where: TipoDocumentoWhereUniqueInput
  }

  /**
   * TipoDocumento findUniqueOrThrow
   */
  export type TipoDocumentoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoDocumento
     */
    select?: TipoDocumentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TipoDocumento
     */
    omit?: TipoDocumentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoDocumentoInclude<ExtArgs> | null
    /**
     * Filter, which TipoDocumento to fetch.
     */
    where: TipoDocumentoWhereUniqueInput
  }

  /**
   * TipoDocumento findFirst
   */
  export type TipoDocumentoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoDocumento
     */
    select?: TipoDocumentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TipoDocumento
     */
    omit?: TipoDocumentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoDocumentoInclude<ExtArgs> | null
    /**
     * Filter, which TipoDocumento to fetch.
     */
    where?: TipoDocumentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TipoDocumentos to fetch.
     */
    orderBy?: TipoDocumentoOrderByWithRelationInput | TipoDocumentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TipoDocumentos.
     */
    cursor?: TipoDocumentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TipoDocumentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TipoDocumentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TipoDocumentos.
     */
    distinct?: TipoDocumentoScalarFieldEnum | TipoDocumentoScalarFieldEnum[]
  }

  /**
   * TipoDocumento findFirstOrThrow
   */
  export type TipoDocumentoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoDocumento
     */
    select?: TipoDocumentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TipoDocumento
     */
    omit?: TipoDocumentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoDocumentoInclude<ExtArgs> | null
    /**
     * Filter, which TipoDocumento to fetch.
     */
    where?: TipoDocumentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TipoDocumentos to fetch.
     */
    orderBy?: TipoDocumentoOrderByWithRelationInput | TipoDocumentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TipoDocumentos.
     */
    cursor?: TipoDocumentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TipoDocumentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TipoDocumentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TipoDocumentos.
     */
    distinct?: TipoDocumentoScalarFieldEnum | TipoDocumentoScalarFieldEnum[]
  }

  /**
   * TipoDocumento findMany
   */
  export type TipoDocumentoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoDocumento
     */
    select?: TipoDocumentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TipoDocumento
     */
    omit?: TipoDocumentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoDocumentoInclude<ExtArgs> | null
    /**
     * Filter, which TipoDocumentos to fetch.
     */
    where?: TipoDocumentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TipoDocumentos to fetch.
     */
    orderBy?: TipoDocumentoOrderByWithRelationInput | TipoDocumentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TipoDocumentos.
     */
    cursor?: TipoDocumentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TipoDocumentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TipoDocumentos.
     */
    skip?: number
    distinct?: TipoDocumentoScalarFieldEnum | TipoDocumentoScalarFieldEnum[]
  }

  /**
   * TipoDocumento create
   */
  export type TipoDocumentoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoDocumento
     */
    select?: TipoDocumentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TipoDocumento
     */
    omit?: TipoDocumentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoDocumentoInclude<ExtArgs> | null
    /**
     * The data needed to create a TipoDocumento.
     */
    data: XOR<TipoDocumentoCreateInput, TipoDocumentoUncheckedCreateInput>
  }

  /**
   * TipoDocumento createMany
   */
  export type TipoDocumentoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TipoDocumentos.
     */
    data: TipoDocumentoCreateManyInput | TipoDocumentoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TipoDocumento update
   */
  export type TipoDocumentoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoDocumento
     */
    select?: TipoDocumentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TipoDocumento
     */
    omit?: TipoDocumentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoDocumentoInclude<ExtArgs> | null
    /**
     * The data needed to update a TipoDocumento.
     */
    data: XOR<TipoDocumentoUpdateInput, TipoDocumentoUncheckedUpdateInput>
    /**
     * Choose, which TipoDocumento to update.
     */
    where: TipoDocumentoWhereUniqueInput
  }

  /**
   * TipoDocumento updateMany
   */
  export type TipoDocumentoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TipoDocumentos.
     */
    data: XOR<TipoDocumentoUpdateManyMutationInput, TipoDocumentoUncheckedUpdateManyInput>
    /**
     * Filter which TipoDocumentos to update
     */
    where?: TipoDocumentoWhereInput
    /**
     * Limit how many TipoDocumentos to update.
     */
    limit?: number
  }

  /**
   * TipoDocumento upsert
   */
  export type TipoDocumentoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoDocumento
     */
    select?: TipoDocumentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TipoDocumento
     */
    omit?: TipoDocumentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoDocumentoInclude<ExtArgs> | null
    /**
     * The filter to search for the TipoDocumento to update in case it exists.
     */
    where: TipoDocumentoWhereUniqueInput
    /**
     * In case the TipoDocumento found by the `where` argument doesn't exist, create a new TipoDocumento with this data.
     */
    create: XOR<TipoDocumentoCreateInput, TipoDocumentoUncheckedCreateInput>
    /**
     * In case the TipoDocumento was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TipoDocumentoUpdateInput, TipoDocumentoUncheckedUpdateInput>
  }

  /**
   * TipoDocumento delete
   */
  export type TipoDocumentoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoDocumento
     */
    select?: TipoDocumentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TipoDocumento
     */
    omit?: TipoDocumentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoDocumentoInclude<ExtArgs> | null
    /**
     * Filter which TipoDocumento to delete.
     */
    where: TipoDocumentoWhereUniqueInput
  }

  /**
   * TipoDocumento deleteMany
   */
  export type TipoDocumentoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TipoDocumentos to delete
     */
    where?: TipoDocumentoWhereInput
    /**
     * Limit how many TipoDocumentos to delete.
     */
    limit?: number
  }

  /**
   * TipoDocumento.documentos
   */
  export type TipoDocumento$documentosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Documento
     */
    omit?: DocumentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoInclude<ExtArgs> | null
    where?: DocumentoWhereInput
    orderBy?: DocumentoOrderByWithRelationInput | DocumentoOrderByWithRelationInput[]
    cursor?: DocumentoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentoScalarFieldEnum | DocumentoScalarFieldEnum[]
  }

  /**
   * TipoDocumento without action
   */
  export type TipoDocumentoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoDocumento
     */
    select?: TipoDocumentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TipoDocumento
     */
    omit?: TipoDocumentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoDocumentoInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const SetorScalarFieldEnum: {
    id: 'id',
    sigla: 'sigla',
    descricao: 'descricao'
  };

  export type SetorScalarFieldEnum = (typeof SetorScalarFieldEnum)[keyof typeof SetorScalarFieldEnum]


  export const TramitacaoDocumentoScalarFieldEnum: {
    id: 'id',
    documentoId: 'documentoId',
    setorEnvioId: 'setorEnvioId',
    setorRecebeId: 'setorRecebeId',
    recebido: 'recebido',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TramitacaoDocumentoScalarFieldEnum = (typeof TramitacaoDocumentoScalarFieldEnum)[keyof typeof TramitacaoDocumentoScalarFieldEnum]


  export const DocumentoScalarFieldEnum: {
    id: 'id',
    numero: 'numero',
    titulo: 'titulo',
    descricao: 'descricao',
    dataCadastro: 'dataCadastro',
    arquivo: 'arquivo',
    tipoDocumentoId: 'tipoDocumentoId'
  };

  export type DocumentoScalarFieldEnum = (typeof DocumentoScalarFieldEnum)[keyof typeof DocumentoScalarFieldEnum]


  export const TipoDocumentoScalarFieldEnum: {
    id: 'id',
    descricao: 'descricao'
  };

  export type TipoDocumentoScalarFieldEnum = (typeof TipoDocumentoScalarFieldEnum)[keyof typeof TipoDocumentoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const SetorOrderByRelevanceFieldEnum: {
    sigla: 'sigla',
    descricao: 'descricao'
  };

  export type SetorOrderByRelevanceFieldEnum = (typeof SetorOrderByRelevanceFieldEnum)[keyof typeof SetorOrderByRelevanceFieldEnum]


  export const DocumentoOrderByRelevanceFieldEnum: {
    numero: 'numero',
    titulo: 'titulo',
    descricao: 'descricao',
    arquivo: 'arquivo'
  };

  export type DocumentoOrderByRelevanceFieldEnum = (typeof DocumentoOrderByRelevanceFieldEnum)[keyof typeof DocumentoOrderByRelevanceFieldEnum]


  export const TipoDocumentoOrderByRelevanceFieldEnum: {
    descricao: 'descricao'
  };

  export type TipoDocumentoOrderByRelevanceFieldEnum = (typeof TipoDocumentoOrderByRelevanceFieldEnum)[keyof typeof TipoDocumentoOrderByRelevanceFieldEnum]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type SetorWhereInput = {
    AND?: SetorWhereInput | SetorWhereInput[]
    OR?: SetorWhereInput[]
    NOT?: SetorWhereInput | SetorWhereInput[]
    id?: IntFilter<"Setor"> | number
    sigla?: StringFilter<"Setor"> | string
    descricao?: StringFilter<"Setor"> | string
    tramitacoesEnviadas?: TramitacaoDocumentoListRelationFilter
    tramitacoesRecebidas?: TramitacaoDocumentoListRelationFilter
  }

  export type SetorOrderByWithRelationInput = {
    id?: SortOrder
    sigla?: SortOrder
    descricao?: SortOrder
    tramitacoesEnviadas?: TramitacaoDocumentoOrderByRelationAggregateInput
    tramitacoesRecebidas?: TramitacaoDocumentoOrderByRelationAggregateInput
    _relevance?: SetorOrderByRelevanceInput
  }

  export type SetorWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    sigla?: string
    AND?: SetorWhereInput | SetorWhereInput[]
    OR?: SetorWhereInput[]
    NOT?: SetorWhereInput | SetorWhereInput[]
    descricao?: StringFilter<"Setor"> | string
    tramitacoesEnviadas?: TramitacaoDocumentoListRelationFilter
    tramitacoesRecebidas?: TramitacaoDocumentoListRelationFilter
  }, "id" | "sigla">

  export type SetorOrderByWithAggregationInput = {
    id?: SortOrder
    sigla?: SortOrder
    descricao?: SortOrder
    _count?: SetorCountOrderByAggregateInput
    _avg?: SetorAvgOrderByAggregateInput
    _max?: SetorMaxOrderByAggregateInput
    _min?: SetorMinOrderByAggregateInput
    _sum?: SetorSumOrderByAggregateInput
  }

  export type SetorScalarWhereWithAggregatesInput = {
    AND?: SetorScalarWhereWithAggregatesInput | SetorScalarWhereWithAggregatesInput[]
    OR?: SetorScalarWhereWithAggregatesInput[]
    NOT?: SetorScalarWhereWithAggregatesInput | SetorScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Setor"> | number
    sigla?: StringWithAggregatesFilter<"Setor"> | string
    descricao?: StringWithAggregatesFilter<"Setor"> | string
  }

  export type TramitacaoDocumentoWhereInput = {
    AND?: TramitacaoDocumentoWhereInput | TramitacaoDocumentoWhereInput[]
    OR?: TramitacaoDocumentoWhereInput[]
    NOT?: TramitacaoDocumentoWhereInput | TramitacaoDocumentoWhereInput[]
    id?: IntFilter<"TramitacaoDocumento"> | number
    documentoId?: IntFilter<"TramitacaoDocumento"> | number
    setorEnvioId?: IntFilter<"TramitacaoDocumento"> | number
    setorRecebeId?: IntFilter<"TramitacaoDocumento"> | number
    recebido?: BoolFilter<"TramitacaoDocumento"> | boolean
    createdAt?: DateTimeFilter<"TramitacaoDocumento"> | Date | string
    updatedAt?: DateTimeFilter<"TramitacaoDocumento"> | Date | string
    documento?: XOR<DocumentoScalarRelationFilter, DocumentoWhereInput>
    setorEnvio?: XOR<SetorScalarRelationFilter, SetorWhereInput>
    setorRecebe?: XOR<SetorScalarRelationFilter, SetorWhereInput>
  }

  export type TramitacaoDocumentoOrderByWithRelationInput = {
    id?: SortOrder
    documentoId?: SortOrder
    setorEnvioId?: SortOrder
    setorRecebeId?: SortOrder
    recebido?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    documento?: DocumentoOrderByWithRelationInput
    setorEnvio?: SetorOrderByWithRelationInput
    setorRecebe?: SetorOrderByWithRelationInput
  }

  export type TramitacaoDocumentoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TramitacaoDocumentoWhereInput | TramitacaoDocumentoWhereInput[]
    OR?: TramitacaoDocumentoWhereInput[]
    NOT?: TramitacaoDocumentoWhereInput | TramitacaoDocumentoWhereInput[]
    documentoId?: IntFilter<"TramitacaoDocumento"> | number
    setorEnvioId?: IntFilter<"TramitacaoDocumento"> | number
    setorRecebeId?: IntFilter<"TramitacaoDocumento"> | number
    recebido?: BoolFilter<"TramitacaoDocumento"> | boolean
    createdAt?: DateTimeFilter<"TramitacaoDocumento"> | Date | string
    updatedAt?: DateTimeFilter<"TramitacaoDocumento"> | Date | string
    documento?: XOR<DocumentoScalarRelationFilter, DocumentoWhereInput>
    setorEnvio?: XOR<SetorScalarRelationFilter, SetorWhereInput>
    setorRecebe?: XOR<SetorScalarRelationFilter, SetorWhereInput>
  }, "id">

  export type TramitacaoDocumentoOrderByWithAggregationInput = {
    id?: SortOrder
    documentoId?: SortOrder
    setorEnvioId?: SortOrder
    setorRecebeId?: SortOrder
    recebido?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TramitacaoDocumentoCountOrderByAggregateInput
    _avg?: TramitacaoDocumentoAvgOrderByAggregateInput
    _max?: TramitacaoDocumentoMaxOrderByAggregateInput
    _min?: TramitacaoDocumentoMinOrderByAggregateInput
    _sum?: TramitacaoDocumentoSumOrderByAggregateInput
  }

  export type TramitacaoDocumentoScalarWhereWithAggregatesInput = {
    AND?: TramitacaoDocumentoScalarWhereWithAggregatesInput | TramitacaoDocumentoScalarWhereWithAggregatesInput[]
    OR?: TramitacaoDocumentoScalarWhereWithAggregatesInput[]
    NOT?: TramitacaoDocumentoScalarWhereWithAggregatesInput | TramitacaoDocumentoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TramitacaoDocumento"> | number
    documentoId?: IntWithAggregatesFilter<"TramitacaoDocumento"> | number
    setorEnvioId?: IntWithAggregatesFilter<"TramitacaoDocumento"> | number
    setorRecebeId?: IntWithAggregatesFilter<"TramitacaoDocumento"> | number
    recebido?: BoolWithAggregatesFilter<"TramitacaoDocumento"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"TramitacaoDocumento"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TramitacaoDocumento"> | Date | string
  }

  export type DocumentoWhereInput = {
    AND?: DocumentoWhereInput | DocumentoWhereInput[]
    OR?: DocumentoWhereInput[]
    NOT?: DocumentoWhereInput | DocumentoWhereInput[]
    id?: IntFilter<"Documento"> | number
    numero?: StringFilter<"Documento"> | string
    titulo?: StringFilter<"Documento"> | string
    descricao?: StringFilter<"Documento"> | string
    dataCadastro?: DateTimeFilter<"Documento"> | Date | string
    arquivo?: StringFilter<"Documento"> | string
    tipoDocumentoId?: IntFilter<"Documento"> | number
    tipoDocumento?: XOR<TipoDocumentoScalarRelationFilter, TipoDocumentoWhereInput>
    tramitacoes?: TramitacaoDocumentoListRelationFilter
  }

  export type DocumentoOrderByWithRelationInput = {
    id?: SortOrder
    numero?: SortOrder
    titulo?: SortOrder
    descricao?: SortOrder
    dataCadastro?: SortOrder
    arquivo?: SortOrder
    tipoDocumentoId?: SortOrder
    tipoDocumento?: TipoDocumentoOrderByWithRelationInput
    tramitacoes?: TramitacaoDocumentoOrderByRelationAggregateInput
    _relevance?: DocumentoOrderByRelevanceInput
  }

  export type DocumentoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    numero?: string
    AND?: DocumentoWhereInput | DocumentoWhereInput[]
    OR?: DocumentoWhereInput[]
    NOT?: DocumentoWhereInput | DocumentoWhereInput[]
    titulo?: StringFilter<"Documento"> | string
    descricao?: StringFilter<"Documento"> | string
    dataCadastro?: DateTimeFilter<"Documento"> | Date | string
    arquivo?: StringFilter<"Documento"> | string
    tipoDocumentoId?: IntFilter<"Documento"> | number
    tipoDocumento?: XOR<TipoDocumentoScalarRelationFilter, TipoDocumentoWhereInput>
    tramitacoes?: TramitacaoDocumentoListRelationFilter
  }, "id" | "numero">

  export type DocumentoOrderByWithAggregationInput = {
    id?: SortOrder
    numero?: SortOrder
    titulo?: SortOrder
    descricao?: SortOrder
    dataCadastro?: SortOrder
    arquivo?: SortOrder
    tipoDocumentoId?: SortOrder
    _count?: DocumentoCountOrderByAggregateInput
    _avg?: DocumentoAvgOrderByAggregateInput
    _max?: DocumentoMaxOrderByAggregateInput
    _min?: DocumentoMinOrderByAggregateInput
    _sum?: DocumentoSumOrderByAggregateInput
  }

  export type DocumentoScalarWhereWithAggregatesInput = {
    AND?: DocumentoScalarWhereWithAggregatesInput | DocumentoScalarWhereWithAggregatesInput[]
    OR?: DocumentoScalarWhereWithAggregatesInput[]
    NOT?: DocumentoScalarWhereWithAggregatesInput | DocumentoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Documento"> | number
    numero?: StringWithAggregatesFilter<"Documento"> | string
    titulo?: StringWithAggregatesFilter<"Documento"> | string
    descricao?: StringWithAggregatesFilter<"Documento"> | string
    dataCadastro?: DateTimeWithAggregatesFilter<"Documento"> | Date | string
    arquivo?: StringWithAggregatesFilter<"Documento"> | string
    tipoDocumentoId?: IntWithAggregatesFilter<"Documento"> | number
  }

  export type TipoDocumentoWhereInput = {
    AND?: TipoDocumentoWhereInput | TipoDocumentoWhereInput[]
    OR?: TipoDocumentoWhereInput[]
    NOT?: TipoDocumentoWhereInput | TipoDocumentoWhereInput[]
    id?: IntFilter<"TipoDocumento"> | number
    descricao?: StringFilter<"TipoDocumento"> | string
    documentos?: DocumentoListRelationFilter
  }

  export type TipoDocumentoOrderByWithRelationInput = {
    id?: SortOrder
    descricao?: SortOrder
    documentos?: DocumentoOrderByRelationAggregateInput
    _relevance?: TipoDocumentoOrderByRelevanceInput
  }

  export type TipoDocumentoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TipoDocumentoWhereInput | TipoDocumentoWhereInput[]
    OR?: TipoDocumentoWhereInput[]
    NOT?: TipoDocumentoWhereInput | TipoDocumentoWhereInput[]
    descricao?: StringFilter<"TipoDocumento"> | string
    documentos?: DocumentoListRelationFilter
  }, "id">

  export type TipoDocumentoOrderByWithAggregationInput = {
    id?: SortOrder
    descricao?: SortOrder
    _count?: TipoDocumentoCountOrderByAggregateInput
    _avg?: TipoDocumentoAvgOrderByAggregateInput
    _max?: TipoDocumentoMaxOrderByAggregateInput
    _min?: TipoDocumentoMinOrderByAggregateInput
    _sum?: TipoDocumentoSumOrderByAggregateInput
  }

  export type TipoDocumentoScalarWhereWithAggregatesInput = {
    AND?: TipoDocumentoScalarWhereWithAggregatesInput | TipoDocumentoScalarWhereWithAggregatesInput[]
    OR?: TipoDocumentoScalarWhereWithAggregatesInput[]
    NOT?: TipoDocumentoScalarWhereWithAggregatesInput | TipoDocumentoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TipoDocumento"> | number
    descricao?: StringWithAggregatesFilter<"TipoDocumento"> | string
  }

  export type SetorCreateInput = {
    sigla: string
    descricao: string
    tramitacoesEnviadas?: TramitacaoDocumentoCreateNestedManyWithoutSetorEnvioInput
    tramitacoesRecebidas?: TramitacaoDocumentoCreateNestedManyWithoutSetorRecebeInput
  }

  export type SetorUncheckedCreateInput = {
    id?: number
    sigla: string
    descricao: string
    tramitacoesEnviadas?: TramitacaoDocumentoUncheckedCreateNestedManyWithoutSetorEnvioInput
    tramitacoesRecebidas?: TramitacaoDocumentoUncheckedCreateNestedManyWithoutSetorRecebeInput
  }

  export type SetorUpdateInput = {
    sigla?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    tramitacoesEnviadas?: TramitacaoDocumentoUpdateManyWithoutSetorEnvioNestedInput
    tramitacoesRecebidas?: TramitacaoDocumentoUpdateManyWithoutSetorRecebeNestedInput
  }

  export type SetorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    sigla?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    tramitacoesEnviadas?: TramitacaoDocumentoUncheckedUpdateManyWithoutSetorEnvioNestedInput
    tramitacoesRecebidas?: TramitacaoDocumentoUncheckedUpdateManyWithoutSetorRecebeNestedInput
  }

  export type SetorCreateManyInput = {
    id?: number
    sigla: string
    descricao: string
  }

  export type SetorUpdateManyMutationInput = {
    sigla?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type SetorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    sigla?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type TramitacaoDocumentoCreateInput = {
    recebido?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    documento: DocumentoCreateNestedOneWithoutTramitacoesInput
    setorEnvio: SetorCreateNestedOneWithoutTramitacoesEnviadasInput
    setorRecebe: SetorCreateNestedOneWithoutTramitacoesRecebidasInput
  }

  export type TramitacaoDocumentoUncheckedCreateInput = {
    id?: number
    documentoId: number
    setorEnvioId: number
    setorRecebeId: number
    recebido?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TramitacaoDocumentoUpdateInput = {
    recebido?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documento?: DocumentoUpdateOneRequiredWithoutTramitacoesNestedInput
    setorEnvio?: SetorUpdateOneRequiredWithoutTramitacoesEnviadasNestedInput
    setorRecebe?: SetorUpdateOneRequiredWithoutTramitacoesRecebidasNestedInput
  }

  export type TramitacaoDocumentoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    documentoId?: IntFieldUpdateOperationsInput | number
    setorEnvioId?: IntFieldUpdateOperationsInput | number
    setorRecebeId?: IntFieldUpdateOperationsInput | number
    recebido?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TramitacaoDocumentoCreateManyInput = {
    id?: number
    documentoId: number
    setorEnvioId: number
    setorRecebeId: number
    recebido?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TramitacaoDocumentoUpdateManyMutationInput = {
    recebido?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TramitacaoDocumentoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    documentoId?: IntFieldUpdateOperationsInput | number
    setorEnvioId?: IntFieldUpdateOperationsInput | number
    setorRecebeId?: IntFieldUpdateOperationsInput | number
    recebido?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentoCreateInput = {
    numero: string
    titulo: string
    descricao: string
    dataCadastro?: Date | string
    arquivo: string
    tipoDocumento: TipoDocumentoCreateNestedOneWithoutDocumentosInput
    tramitacoes?: TramitacaoDocumentoCreateNestedManyWithoutDocumentoInput
  }

  export type DocumentoUncheckedCreateInput = {
    id?: number
    numero: string
    titulo: string
    descricao: string
    dataCadastro?: Date | string
    arquivo: string
    tipoDocumentoId: number
    tramitacoes?: TramitacaoDocumentoUncheckedCreateNestedManyWithoutDocumentoInput
  }

  export type DocumentoUpdateInput = {
    numero?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    dataCadastro?: DateTimeFieldUpdateOperationsInput | Date | string
    arquivo?: StringFieldUpdateOperationsInput | string
    tipoDocumento?: TipoDocumentoUpdateOneRequiredWithoutDocumentosNestedInput
    tramitacoes?: TramitacaoDocumentoUpdateManyWithoutDocumentoNestedInput
  }

  export type DocumentoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    numero?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    dataCadastro?: DateTimeFieldUpdateOperationsInput | Date | string
    arquivo?: StringFieldUpdateOperationsInput | string
    tipoDocumentoId?: IntFieldUpdateOperationsInput | number
    tramitacoes?: TramitacaoDocumentoUncheckedUpdateManyWithoutDocumentoNestedInput
  }

  export type DocumentoCreateManyInput = {
    id?: number
    numero: string
    titulo: string
    descricao: string
    dataCadastro?: Date | string
    arquivo: string
    tipoDocumentoId: number
  }

  export type DocumentoUpdateManyMutationInput = {
    numero?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    dataCadastro?: DateTimeFieldUpdateOperationsInput | Date | string
    arquivo?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    numero?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    dataCadastro?: DateTimeFieldUpdateOperationsInput | Date | string
    arquivo?: StringFieldUpdateOperationsInput | string
    tipoDocumentoId?: IntFieldUpdateOperationsInput | number
  }

  export type TipoDocumentoCreateInput = {
    descricao: string
    documentos?: DocumentoCreateNestedManyWithoutTipoDocumentoInput
  }

  export type TipoDocumentoUncheckedCreateInput = {
    id?: number
    descricao: string
    documentos?: DocumentoUncheckedCreateNestedManyWithoutTipoDocumentoInput
  }

  export type TipoDocumentoUpdateInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    documentos?: DocumentoUpdateManyWithoutTipoDocumentoNestedInput
  }

  export type TipoDocumentoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    documentos?: DocumentoUncheckedUpdateManyWithoutTipoDocumentoNestedInput
  }

  export type TipoDocumentoCreateManyInput = {
    id?: number
    descricao: string
  }

  export type TipoDocumentoUpdateManyMutationInput = {
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type TipoDocumentoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type TramitacaoDocumentoListRelationFilter = {
    every?: TramitacaoDocumentoWhereInput
    some?: TramitacaoDocumentoWhereInput
    none?: TramitacaoDocumentoWhereInput
  }

  export type TramitacaoDocumentoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SetorOrderByRelevanceInput = {
    fields: SetorOrderByRelevanceFieldEnum | SetorOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type SetorCountOrderByAggregateInput = {
    id?: SortOrder
    sigla?: SortOrder
    descricao?: SortOrder
  }

  export type SetorAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SetorMaxOrderByAggregateInput = {
    id?: SortOrder
    sigla?: SortOrder
    descricao?: SortOrder
  }

  export type SetorMinOrderByAggregateInput = {
    id?: SortOrder
    sigla?: SortOrder
    descricao?: SortOrder
  }

  export type SetorSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DocumentoScalarRelationFilter = {
    is?: DocumentoWhereInput
    isNot?: DocumentoWhereInput
  }

  export type SetorScalarRelationFilter = {
    is?: SetorWhereInput
    isNot?: SetorWhereInput
  }

  export type TramitacaoDocumentoCountOrderByAggregateInput = {
    id?: SortOrder
    documentoId?: SortOrder
    setorEnvioId?: SortOrder
    setorRecebeId?: SortOrder
    recebido?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TramitacaoDocumentoAvgOrderByAggregateInput = {
    id?: SortOrder
    documentoId?: SortOrder
    setorEnvioId?: SortOrder
    setorRecebeId?: SortOrder
  }

  export type TramitacaoDocumentoMaxOrderByAggregateInput = {
    id?: SortOrder
    documentoId?: SortOrder
    setorEnvioId?: SortOrder
    setorRecebeId?: SortOrder
    recebido?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TramitacaoDocumentoMinOrderByAggregateInput = {
    id?: SortOrder
    documentoId?: SortOrder
    setorEnvioId?: SortOrder
    setorRecebeId?: SortOrder
    recebido?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TramitacaoDocumentoSumOrderByAggregateInput = {
    id?: SortOrder
    documentoId?: SortOrder
    setorEnvioId?: SortOrder
    setorRecebeId?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type TipoDocumentoScalarRelationFilter = {
    is?: TipoDocumentoWhereInput
    isNot?: TipoDocumentoWhereInput
  }

  export type DocumentoOrderByRelevanceInput = {
    fields: DocumentoOrderByRelevanceFieldEnum | DocumentoOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type DocumentoCountOrderByAggregateInput = {
    id?: SortOrder
    numero?: SortOrder
    titulo?: SortOrder
    descricao?: SortOrder
    dataCadastro?: SortOrder
    arquivo?: SortOrder
    tipoDocumentoId?: SortOrder
  }

  export type DocumentoAvgOrderByAggregateInput = {
    id?: SortOrder
    tipoDocumentoId?: SortOrder
  }

  export type DocumentoMaxOrderByAggregateInput = {
    id?: SortOrder
    numero?: SortOrder
    titulo?: SortOrder
    descricao?: SortOrder
    dataCadastro?: SortOrder
    arquivo?: SortOrder
    tipoDocumentoId?: SortOrder
  }

  export type DocumentoMinOrderByAggregateInput = {
    id?: SortOrder
    numero?: SortOrder
    titulo?: SortOrder
    descricao?: SortOrder
    dataCadastro?: SortOrder
    arquivo?: SortOrder
    tipoDocumentoId?: SortOrder
  }

  export type DocumentoSumOrderByAggregateInput = {
    id?: SortOrder
    tipoDocumentoId?: SortOrder
  }

  export type DocumentoListRelationFilter = {
    every?: DocumentoWhereInput
    some?: DocumentoWhereInput
    none?: DocumentoWhereInput
  }

  export type DocumentoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TipoDocumentoOrderByRelevanceInput = {
    fields: TipoDocumentoOrderByRelevanceFieldEnum | TipoDocumentoOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type TipoDocumentoCountOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
  }

  export type TipoDocumentoAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TipoDocumentoMaxOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
  }

  export type TipoDocumentoMinOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
  }

  export type TipoDocumentoSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TramitacaoDocumentoCreateNestedManyWithoutSetorEnvioInput = {
    create?: XOR<TramitacaoDocumentoCreateWithoutSetorEnvioInput, TramitacaoDocumentoUncheckedCreateWithoutSetorEnvioInput> | TramitacaoDocumentoCreateWithoutSetorEnvioInput[] | TramitacaoDocumentoUncheckedCreateWithoutSetorEnvioInput[]
    connectOrCreate?: TramitacaoDocumentoCreateOrConnectWithoutSetorEnvioInput | TramitacaoDocumentoCreateOrConnectWithoutSetorEnvioInput[]
    createMany?: TramitacaoDocumentoCreateManySetorEnvioInputEnvelope
    connect?: TramitacaoDocumentoWhereUniqueInput | TramitacaoDocumentoWhereUniqueInput[]
  }

  export type TramitacaoDocumentoCreateNestedManyWithoutSetorRecebeInput = {
    create?: XOR<TramitacaoDocumentoCreateWithoutSetorRecebeInput, TramitacaoDocumentoUncheckedCreateWithoutSetorRecebeInput> | TramitacaoDocumentoCreateWithoutSetorRecebeInput[] | TramitacaoDocumentoUncheckedCreateWithoutSetorRecebeInput[]
    connectOrCreate?: TramitacaoDocumentoCreateOrConnectWithoutSetorRecebeInput | TramitacaoDocumentoCreateOrConnectWithoutSetorRecebeInput[]
    createMany?: TramitacaoDocumentoCreateManySetorRecebeInputEnvelope
    connect?: TramitacaoDocumentoWhereUniqueInput | TramitacaoDocumentoWhereUniqueInput[]
  }

  export type TramitacaoDocumentoUncheckedCreateNestedManyWithoutSetorEnvioInput = {
    create?: XOR<TramitacaoDocumentoCreateWithoutSetorEnvioInput, TramitacaoDocumentoUncheckedCreateWithoutSetorEnvioInput> | TramitacaoDocumentoCreateWithoutSetorEnvioInput[] | TramitacaoDocumentoUncheckedCreateWithoutSetorEnvioInput[]
    connectOrCreate?: TramitacaoDocumentoCreateOrConnectWithoutSetorEnvioInput | TramitacaoDocumentoCreateOrConnectWithoutSetorEnvioInput[]
    createMany?: TramitacaoDocumentoCreateManySetorEnvioInputEnvelope
    connect?: TramitacaoDocumentoWhereUniqueInput | TramitacaoDocumentoWhereUniqueInput[]
  }

  export type TramitacaoDocumentoUncheckedCreateNestedManyWithoutSetorRecebeInput = {
    create?: XOR<TramitacaoDocumentoCreateWithoutSetorRecebeInput, TramitacaoDocumentoUncheckedCreateWithoutSetorRecebeInput> | TramitacaoDocumentoCreateWithoutSetorRecebeInput[] | TramitacaoDocumentoUncheckedCreateWithoutSetorRecebeInput[]
    connectOrCreate?: TramitacaoDocumentoCreateOrConnectWithoutSetorRecebeInput | TramitacaoDocumentoCreateOrConnectWithoutSetorRecebeInput[]
    createMany?: TramitacaoDocumentoCreateManySetorRecebeInputEnvelope
    connect?: TramitacaoDocumentoWhereUniqueInput | TramitacaoDocumentoWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type TramitacaoDocumentoUpdateManyWithoutSetorEnvioNestedInput = {
    create?: XOR<TramitacaoDocumentoCreateWithoutSetorEnvioInput, TramitacaoDocumentoUncheckedCreateWithoutSetorEnvioInput> | TramitacaoDocumentoCreateWithoutSetorEnvioInput[] | TramitacaoDocumentoUncheckedCreateWithoutSetorEnvioInput[]
    connectOrCreate?: TramitacaoDocumentoCreateOrConnectWithoutSetorEnvioInput | TramitacaoDocumentoCreateOrConnectWithoutSetorEnvioInput[]
    upsert?: TramitacaoDocumentoUpsertWithWhereUniqueWithoutSetorEnvioInput | TramitacaoDocumentoUpsertWithWhereUniqueWithoutSetorEnvioInput[]
    createMany?: TramitacaoDocumentoCreateManySetorEnvioInputEnvelope
    set?: TramitacaoDocumentoWhereUniqueInput | TramitacaoDocumentoWhereUniqueInput[]
    disconnect?: TramitacaoDocumentoWhereUniqueInput | TramitacaoDocumentoWhereUniqueInput[]
    delete?: TramitacaoDocumentoWhereUniqueInput | TramitacaoDocumentoWhereUniqueInput[]
    connect?: TramitacaoDocumentoWhereUniqueInput | TramitacaoDocumentoWhereUniqueInput[]
    update?: TramitacaoDocumentoUpdateWithWhereUniqueWithoutSetorEnvioInput | TramitacaoDocumentoUpdateWithWhereUniqueWithoutSetorEnvioInput[]
    updateMany?: TramitacaoDocumentoUpdateManyWithWhereWithoutSetorEnvioInput | TramitacaoDocumentoUpdateManyWithWhereWithoutSetorEnvioInput[]
    deleteMany?: TramitacaoDocumentoScalarWhereInput | TramitacaoDocumentoScalarWhereInput[]
  }

  export type TramitacaoDocumentoUpdateManyWithoutSetorRecebeNestedInput = {
    create?: XOR<TramitacaoDocumentoCreateWithoutSetorRecebeInput, TramitacaoDocumentoUncheckedCreateWithoutSetorRecebeInput> | TramitacaoDocumentoCreateWithoutSetorRecebeInput[] | TramitacaoDocumentoUncheckedCreateWithoutSetorRecebeInput[]
    connectOrCreate?: TramitacaoDocumentoCreateOrConnectWithoutSetorRecebeInput | TramitacaoDocumentoCreateOrConnectWithoutSetorRecebeInput[]
    upsert?: TramitacaoDocumentoUpsertWithWhereUniqueWithoutSetorRecebeInput | TramitacaoDocumentoUpsertWithWhereUniqueWithoutSetorRecebeInput[]
    createMany?: TramitacaoDocumentoCreateManySetorRecebeInputEnvelope
    set?: TramitacaoDocumentoWhereUniqueInput | TramitacaoDocumentoWhereUniqueInput[]
    disconnect?: TramitacaoDocumentoWhereUniqueInput | TramitacaoDocumentoWhereUniqueInput[]
    delete?: TramitacaoDocumentoWhereUniqueInput | TramitacaoDocumentoWhereUniqueInput[]
    connect?: TramitacaoDocumentoWhereUniqueInput | TramitacaoDocumentoWhereUniqueInput[]
    update?: TramitacaoDocumentoUpdateWithWhereUniqueWithoutSetorRecebeInput | TramitacaoDocumentoUpdateWithWhereUniqueWithoutSetorRecebeInput[]
    updateMany?: TramitacaoDocumentoUpdateManyWithWhereWithoutSetorRecebeInput | TramitacaoDocumentoUpdateManyWithWhereWithoutSetorRecebeInput[]
    deleteMany?: TramitacaoDocumentoScalarWhereInput | TramitacaoDocumentoScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TramitacaoDocumentoUncheckedUpdateManyWithoutSetorEnvioNestedInput = {
    create?: XOR<TramitacaoDocumentoCreateWithoutSetorEnvioInput, TramitacaoDocumentoUncheckedCreateWithoutSetorEnvioInput> | TramitacaoDocumentoCreateWithoutSetorEnvioInput[] | TramitacaoDocumentoUncheckedCreateWithoutSetorEnvioInput[]
    connectOrCreate?: TramitacaoDocumentoCreateOrConnectWithoutSetorEnvioInput | TramitacaoDocumentoCreateOrConnectWithoutSetorEnvioInput[]
    upsert?: TramitacaoDocumentoUpsertWithWhereUniqueWithoutSetorEnvioInput | TramitacaoDocumentoUpsertWithWhereUniqueWithoutSetorEnvioInput[]
    createMany?: TramitacaoDocumentoCreateManySetorEnvioInputEnvelope
    set?: TramitacaoDocumentoWhereUniqueInput | TramitacaoDocumentoWhereUniqueInput[]
    disconnect?: TramitacaoDocumentoWhereUniqueInput | TramitacaoDocumentoWhereUniqueInput[]
    delete?: TramitacaoDocumentoWhereUniqueInput | TramitacaoDocumentoWhereUniqueInput[]
    connect?: TramitacaoDocumentoWhereUniqueInput | TramitacaoDocumentoWhereUniqueInput[]
    update?: TramitacaoDocumentoUpdateWithWhereUniqueWithoutSetorEnvioInput | TramitacaoDocumentoUpdateWithWhereUniqueWithoutSetorEnvioInput[]
    updateMany?: TramitacaoDocumentoUpdateManyWithWhereWithoutSetorEnvioInput | TramitacaoDocumentoUpdateManyWithWhereWithoutSetorEnvioInput[]
    deleteMany?: TramitacaoDocumentoScalarWhereInput | TramitacaoDocumentoScalarWhereInput[]
  }

  export type TramitacaoDocumentoUncheckedUpdateManyWithoutSetorRecebeNestedInput = {
    create?: XOR<TramitacaoDocumentoCreateWithoutSetorRecebeInput, TramitacaoDocumentoUncheckedCreateWithoutSetorRecebeInput> | TramitacaoDocumentoCreateWithoutSetorRecebeInput[] | TramitacaoDocumentoUncheckedCreateWithoutSetorRecebeInput[]
    connectOrCreate?: TramitacaoDocumentoCreateOrConnectWithoutSetorRecebeInput | TramitacaoDocumentoCreateOrConnectWithoutSetorRecebeInput[]
    upsert?: TramitacaoDocumentoUpsertWithWhereUniqueWithoutSetorRecebeInput | TramitacaoDocumentoUpsertWithWhereUniqueWithoutSetorRecebeInput[]
    createMany?: TramitacaoDocumentoCreateManySetorRecebeInputEnvelope
    set?: TramitacaoDocumentoWhereUniqueInput | TramitacaoDocumentoWhereUniqueInput[]
    disconnect?: TramitacaoDocumentoWhereUniqueInput | TramitacaoDocumentoWhereUniqueInput[]
    delete?: TramitacaoDocumentoWhereUniqueInput | TramitacaoDocumentoWhereUniqueInput[]
    connect?: TramitacaoDocumentoWhereUniqueInput | TramitacaoDocumentoWhereUniqueInput[]
    update?: TramitacaoDocumentoUpdateWithWhereUniqueWithoutSetorRecebeInput | TramitacaoDocumentoUpdateWithWhereUniqueWithoutSetorRecebeInput[]
    updateMany?: TramitacaoDocumentoUpdateManyWithWhereWithoutSetorRecebeInput | TramitacaoDocumentoUpdateManyWithWhereWithoutSetorRecebeInput[]
    deleteMany?: TramitacaoDocumentoScalarWhereInput | TramitacaoDocumentoScalarWhereInput[]
  }

  export type DocumentoCreateNestedOneWithoutTramitacoesInput = {
    create?: XOR<DocumentoCreateWithoutTramitacoesInput, DocumentoUncheckedCreateWithoutTramitacoesInput>
    connectOrCreate?: DocumentoCreateOrConnectWithoutTramitacoesInput
    connect?: DocumentoWhereUniqueInput
  }

  export type SetorCreateNestedOneWithoutTramitacoesEnviadasInput = {
    create?: XOR<SetorCreateWithoutTramitacoesEnviadasInput, SetorUncheckedCreateWithoutTramitacoesEnviadasInput>
    connectOrCreate?: SetorCreateOrConnectWithoutTramitacoesEnviadasInput
    connect?: SetorWhereUniqueInput
  }

  export type SetorCreateNestedOneWithoutTramitacoesRecebidasInput = {
    create?: XOR<SetorCreateWithoutTramitacoesRecebidasInput, SetorUncheckedCreateWithoutTramitacoesRecebidasInput>
    connectOrCreate?: SetorCreateOrConnectWithoutTramitacoesRecebidasInput
    connect?: SetorWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type DocumentoUpdateOneRequiredWithoutTramitacoesNestedInput = {
    create?: XOR<DocumentoCreateWithoutTramitacoesInput, DocumentoUncheckedCreateWithoutTramitacoesInput>
    connectOrCreate?: DocumentoCreateOrConnectWithoutTramitacoesInput
    upsert?: DocumentoUpsertWithoutTramitacoesInput
    connect?: DocumentoWhereUniqueInput
    update?: XOR<XOR<DocumentoUpdateToOneWithWhereWithoutTramitacoesInput, DocumentoUpdateWithoutTramitacoesInput>, DocumentoUncheckedUpdateWithoutTramitacoesInput>
  }

  export type SetorUpdateOneRequiredWithoutTramitacoesEnviadasNestedInput = {
    create?: XOR<SetorCreateWithoutTramitacoesEnviadasInput, SetorUncheckedCreateWithoutTramitacoesEnviadasInput>
    connectOrCreate?: SetorCreateOrConnectWithoutTramitacoesEnviadasInput
    upsert?: SetorUpsertWithoutTramitacoesEnviadasInput
    connect?: SetorWhereUniqueInput
    update?: XOR<XOR<SetorUpdateToOneWithWhereWithoutTramitacoesEnviadasInput, SetorUpdateWithoutTramitacoesEnviadasInput>, SetorUncheckedUpdateWithoutTramitacoesEnviadasInput>
  }

  export type SetorUpdateOneRequiredWithoutTramitacoesRecebidasNestedInput = {
    create?: XOR<SetorCreateWithoutTramitacoesRecebidasInput, SetorUncheckedCreateWithoutTramitacoesRecebidasInput>
    connectOrCreate?: SetorCreateOrConnectWithoutTramitacoesRecebidasInput
    upsert?: SetorUpsertWithoutTramitacoesRecebidasInput
    connect?: SetorWhereUniqueInput
    update?: XOR<XOR<SetorUpdateToOneWithWhereWithoutTramitacoesRecebidasInput, SetorUpdateWithoutTramitacoesRecebidasInput>, SetorUncheckedUpdateWithoutTramitacoesRecebidasInput>
  }

  export type TipoDocumentoCreateNestedOneWithoutDocumentosInput = {
    create?: XOR<TipoDocumentoCreateWithoutDocumentosInput, TipoDocumentoUncheckedCreateWithoutDocumentosInput>
    connectOrCreate?: TipoDocumentoCreateOrConnectWithoutDocumentosInput
    connect?: TipoDocumentoWhereUniqueInput
  }

  export type TramitacaoDocumentoCreateNestedManyWithoutDocumentoInput = {
    create?: XOR<TramitacaoDocumentoCreateWithoutDocumentoInput, TramitacaoDocumentoUncheckedCreateWithoutDocumentoInput> | TramitacaoDocumentoCreateWithoutDocumentoInput[] | TramitacaoDocumentoUncheckedCreateWithoutDocumentoInput[]
    connectOrCreate?: TramitacaoDocumentoCreateOrConnectWithoutDocumentoInput | TramitacaoDocumentoCreateOrConnectWithoutDocumentoInput[]
    createMany?: TramitacaoDocumentoCreateManyDocumentoInputEnvelope
    connect?: TramitacaoDocumentoWhereUniqueInput | TramitacaoDocumentoWhereUniqueInput[]
  }

  export type TramitacaoDocumentoUncheckedCreateNestedManyWithoutDocumentoInput = {
    create?: XOR<TramitacaoDocumentoCreateWithoutDocumentoInput, TramitacaoDocumentoUncheckedCreateWithoutDocumentoInput> | TramitacaoDocumentoCreateWithoutDocumentoInput[] | TramitacaoDocumentoUncheckedCreateWithoutDocumentoInput[]
    connectOrCreate?: TramitacaoDocumentoCreateOrConnectWithoutDocumentoInput | TramitacaoDocumentoCreateOrConnectWithoutDocumentoInput[]
    createMany?: TramitacaoDocumentoCreateManyDocumentoInputEnvelope
    connect?: TramitacaoDocumentoWhereUniqueInput | TramitacaoDocumentoWhereUniqueInput[]
  }

  export type TipoDocumentoUpdateOneRequiredWithoutDocumentosNestedInput = {
    create?: XOR<TipoDocumentoCreateWithoutDocumentosInput, TipoDocumentoUncheckedCreateWithoutDocumentosInput>
    connectOrCreate?: TipoDocumentoCreateOrConnectWithoutDocumentosInput
    upsert?: TipoDocumentoUpsertWithoutDocumentosInput
    connect?: TipoDocumentoWhereUniqueInput
    update?: XOR<XOR<TipoDocumentoUpdateToOneWithWhereWithoutDocumentosInput, TipoDocumentoUpdateWithoutDocumentosInput>, TipoDocumentoUncheckedUpdateWithoutDocumentosInput>
  }

  export type TramitacaoDocumentoUpdateManyWithoutDocumentoNestedInput = {
    create?: XOR<TramitacaoDocumentoCreateWithoutDocumentoInput, TramitacaoDocumentoUncheckedCreateWithoutDocumentoInput> | TramitacaoDocumentoCreateWithoutDocumentoInput[] | TramitacaoDocumentoUncheckedCreateWithoutDocumentoInput[]
    connectOrCreate?: TramitacaoDocumentoCreateOrConnectWithoutDocumentoInput | TramitacaoDocumentoCreateOrConnectWithoutDocumentoInput[]
    upsert?: TramitacaoDocumentoUpsertWithWhereUniqueWithoutDocumentoInput | TramitacaoDocumentoUpsertWithWhereUniqueWithoutDocumentoInput[]
    createMany?: TramitacaoDocumentoCreateManyDocumentoInputEnvelope
    set?: TramitacaoDocumentoWhereUniqueInput | TramitacaoDocumentoWhereUniqueInput[]
    disconnect?: TramitacaoDocumentoWhereUniqueInput | TramitacaoDocumentoWhereUniqueInput[]
    delete?: TramitacaoDocumentoWhereUniqueInput | TramitacaoDocumentoWhereUniqueInput[]
    connect?: TramitacaoDocumentoWhereUniqueInput | TramitacaoDocumentoWhereUniqueInput[]
    update?: TramitacaoDocumentoUpdateWithWhereUniqueWithoutDocumentoInput | TramitacaoDocumentoUpdateWithWhereUniqueWithoutDocumentoInput[]
    updateMany?: TramitacaoDocumentoUpdateManyWithWhereWithoutDocumentoInput | TramitacaoDocumentoUpdateManyWithWhereWithoutDocumentoInput[]
    deleteMany?: TramitacaoDocumentoScalarWhereInput | TramitacaoDocumentoScalarWhereInput[]
  }

  export type TramitacaoDocumentoUncheckedUpdateManyWithoutDocumentoNestedInput = {
    create?: XOR<TramitacaoDocumentoCreateWithoutDocumentoInput, TramitacaoDocumentoUncheckedCreateWithoutDocumentoInput> | TramitacaoDocumentoCreateWithoutDocumentoInput[] | TramitacaoDocumentoUncheckedCreateWithoutDocumentoInput[]
    connectOrCreate?: TramitacaoDocumentoCreateOrConnectWithoutDocumentoInput | TramitacaoDocumentoCreateOrConnectWithoutDocumentoInput[]
    upsert?: TramitacaoDocumentoUpsertWithWhereUniqueWithoutDocumentoInput | TramitacaoDocumentoUpsertWithWhereUniqueWithoutDocumentoInput[]
    createMany?: TramitacaoDocumentoCreateManyDocumentoInputEnvelope
    set?: TramitacaoDocumentoWhereUniqueInput | TramitacaoDocumentoWhereUniqueInput[]
    disconnect?: TramitacaoDocumentoWhereUniqueInput | TramitacaoDocumentoWhereUniqueInput[]
    delete?: TramitacaoDocumentoWhereUniqueInput | TramitacaoDocumentoWhereUniqueInput[]
    connect?: TramitacaoDocumentoWhereUniqueInput | TramitacaoDocumentoWhereUniqueInput[]
    update?: TramitacaoDocumentoUpdateWithWhereUniqueWithoutDocumentoInput | TramitacaoDocumentoUpdateWithWhereUniqueWithoutDocumentoInput[]
    updateMany?: TramitacaoDocumentoUpdateManyWithWhereWithoutDocumentoInput | TramitacaoDocumentoUpdateManyWithWhereWithoutDocumentoInput[]
    deleteMany?: TramitacaoDocumentoScalarWhereInput | TramitacaoDocumentoScalarWhereInput[]
  }

  export type DocumentoCreateNestedManyWithoutTipoDocumentoInput = {
    create?: XOR<DocumentoCreateWithoutTipoDocumentoInput, DocumentoUncheckedCreateWithoutTipoDocumentoInput> | DocumentoCreateWithoutTipoDocumentoInput[] | DocumentoUncheckedCreateWithoutTipoDocumentoInput[]
    connectOrCreate?: DocumentoCreateOrConnectWithoutTipoDocumentoInput | DocumentoCreateOrConnectWithoutTipoDocumentoInput[]
    createMany?: DocumentoCreateManyTipoDocumentoInputEnvelope
    connect?: DocumentoWhereUniqueInput | DocumentoWhereUniqueInput[]
  }

  export type DocumentoUncheckedCreateNestedManyWithoutTipoDocumentoInput = {
    create?: XOR<DocumentoCreateWithoutTipoDocumentoInput, DocumentoUncheckedCreateWithoutTipoDocumentoInput> | DocumentoCreateWithoutTipoDocumentoInput[] | DocumentoUncheckedCreateWithoutTipoDocumentoInput[]
    connectOrCreate?: DocumentoCreateOrConnectWithoutTipoDocumentoInput | DocumentoCreateOrConnectWithoutTipoDocumentoInput[]
    createMany?: DocumentoCreateManyTipoDocumentoInputEnvelope
    connect?: DocumentoWhereUniqueInput | DocumentoWhereUniqueInput[]
  }

  export type DocumentoUpdateManyWithoutTipoDocumentoNestedInput = {
    create?: XOR<DocumentoCreateWithoutTipoDocumentoInput, DocumentoUncheckedCreateWithoutTipoDocumentoInput> | DocumentoCreateWithoutTipoDocumentoInput[] | DocumentoUncheckedCreateWithoutTipoDocumentoInput[]
    connectOrCreate?: DocumentoCreateOrConnectWithoutTipoDocumentoInput | DocumentoCreateOrConnectWithoutTipoDocumentoInput[]
    upsert?: DocumentoUpsertWithWhereUniqueWithoutTipoDocumentoInput | DocumentoUpsertWithWhereUniqueWithoutTipoDocumentoInput[]
    createMany?: DocumentoCreateManyTipoDocumentoInputEnvelope
    set?: DocumentoWhereUniqueInput | DocumentoWhereUniqueInput[]
    disconnect?: DocumentoWhereUniqueInput | DocumentoWhereUniqueInput[]
    delete?: DocumentoWhereUniqueInput | DocumentoWhereUniqueInput[]
    connect?: DocumentoWhereUniqueInput | DocumentoWhereUniqueInput[]
    update?: DocumentoUpdateWithWhereUniqueWithoutTipoDocumentoInput | DocumentoUpdateWithWhereUniqueWithoutTipoDocumentoInput[]
    updateMany?: DocumentoUpdateManyWithWhereWithoutTipoDocumentoInput | DocumentoUpdateManyWithWhereWithoutTipoDocumentoInput[]
    deleteMany?: DocumentoScalarWhereInput | DocumentoScalarWhereInput[]
  }

  export type DocumentoUncheckedUpdateManyWithoutTipoDocumentoNestedInput = {
    create?: XOR<DocumentoCreateWithoutTipoDocumentoInput, DocumentoUncheckedCreateWithoutTipoDocumentoInput> | DocumentoCreateWithoutTipoDocumentoInput[] | DocumentoUncheckedCreateWithoutTipoDocumentoInput[]
    connectOrCreate?: DocumentoCreateOrConnectWithoutTipoDocumentoInput | DocumentoCreateOrConnectWithoutTipoDocumentoInput[]
    upsert?: DocumentoUpsertWithWhereUniqueWithoutTipoDocumentoInput | DocumentoUpsertWithWhereUniqueWithoutTipoDocumentoInput[]
    createMany?: DocumentoCreateManyTipoDocumentoInputEnvelope
    set?: DocumentoWhereUniqueInput | DocumentoWhereUniqueInput[]
    disconnect?: DocumentoWhereUniqueInput | DocumentoWhereUniqueInput[]
    delete?: DocumentoWhereUniqueInput | DocumentoWhereUniqueInput[]
    connect?: DocumentoWhereUniqueInput | DocumentoWhereUniqueInput[]
    update?: DocumentoUpdateWithWhereUniqueWithoutTipoDocumentoInput | DocumentoUpdateWithWhereUniqueWithoutTipoDocumentoInput[]
    updateMany?: DocumentoUpdateManyWithWhereWithoutTipoDocumentoInput | DocumentoUpdateManyWithWhereWithoutTipoDocumentoInput[]
    deleteMany?: DocumentoScalarWhereInput | DocumentoScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type TramitacaoDocumentoCreateWithoutSetorEnvioInput = {
    recebido?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    documento: DocumentoCreateNestedOneWithoutTramitacoesInput
    setorRecebe: SetorCreateNestedOneWithoutTramitacoesRecebidasInput
  }

  export type TramitacaoDocumentoUncheckedCreateWithoutSetorEnvioInput = {
    id?: number
    documentoId: number
    setorRecebeId: number
    recebido?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TramitacaoDocumentoCreateOrConnectWithoutSetorEnvioInput = {
    where: TramitacaoDocumentoWhereUniqueInput
    create: XOR<TramitacaoDocumentoCreateWithoutSetorEnvioInput, TramitacaoDocumentoUncheckedCreateWithoutSetorEnvioInput>
  }

  export type TramitacaoDocumentoCreateManySetorEnvioInputEnvelope = {
    data: TramitacaoDocumentoCreateManySetorEnvioInput | TramitacaoDocumentoCreateManySetorEnvioInput[]
    skipDuplicates?: boolean
  }

  export type TramitacaoDocumentoCreateWithoutSetorRecebeInput = {
    recebido?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    documento: DocumentoCreateNestedOneWithoutTramitacoesInput
    setorEnvio: SetorCreateNestedOneWithoutTramitacoesEnviadasInput
  }

  export type TramitacaoDocumentoUncheckedCreateWithoutSetorRecebeInput = {
    id?: number
    documentoId: number
    setorEnvioId: number
    recebido?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TramitacaoDocumentoCreateOrConnectWithoutSetorRecebeInput = {
    where: TramitacaoDocumentoWhereUniqueInput
    create: XOR<TramitacaoDocumentoCreateWithoutSetorRecebeInput, TramitacaoDocumentoUncheckedCreateWithoutSetorRecebeInput>
  }

  export type TramitacaoDocumentoCreateManySetorRecebeInputEnvelope = {
    data: TramitacaoDocumentoCreateManySetorRecebeInput | TramitacaoDocumentoCreateManySetorRecebeInput[]
    skipDuplicates?: boolean
  }

  export type TramitacaoDocumentoUpsertWithWhereUniqueWithoutSetorEnvioInput = {
    where: TramitacaoDocumentoWhereUniqueInput
    update: XOR<TramitacaoDocumentoUpdateWithoutSetorEnvioInput, TramitacaoDocumentoUncheckedUpdateWithoutSetorEnvioInput>
    create: XOR<TramitacaoDocumentoCreateWithoutSetorEnvioInput, TramitacaoDocumentoUncheckedCreateWithoutSetorEnvioInput>
  }

  export type TramitacaoDocumentoUpdateWithWhereUniqueWithoutSetorEnvioInput = {
    where: TramitacaoDocumentoWhereUniqueInput
    data: XOR<TramitacaoDocumentoUpdateWithoutSetorEnvioInput, TramitacaoDocumentoUncheckedUpdateWithoutSetorEnvioInput>
  }

  export type TramitacaoDocumentoUpdateManyWithWhereWithoutSetorEnvioInput = {
    where: TramitacaoDocumentoScalarWhereInput
    data: XOR<TramitacaoDocumentoUpdateManyMutationInput, TramitacaoDocumentoUncheckedUpdateManyWithoutSetorEnvioInput>
  }

  export type TramitacaoDocumentoScalarWhereInput = {
    AND?: TramitacaoDocumentoScalarWhereInput | TramitacaoDocumentoScalarWhereInput[]
    OR?: TramitacaoDocumentoScalarWhereInput[]
    NOT?: TramitacaoDocumentoScalarWhereInput | TramitacaoDocumentoScalarWhereInput[]
    id?: IntFilter<"TramitacaoDocumento"> | number
    documentoId?: IntFilter<"TramitacaoDocumento"> | number
    setorEnvioId?: IntFilter<"TramitacaoDocumento"> | number
    setorRecebeId?: IntFilter<"TramitacaoDocumento"> | number
    recebido?: BoolFilter<"TramitacaoDocumento"> | boolean
    createdAt?: DateTimeFilter<"TramitacaoDocumento"> | Date | string
    updatedAt?: DateTimeFilter<"TramitacaoDocumento"> | Date | string
  }

  export type TramitacaoDocumentoUpsertWithWhereUniqueWithoutSetorRecebeInput = {
    where: TramitacaoDocumentoWhereUniqueInput
    update: XOR<TramitacaoDocumentoUpdateWithoutSetorRecebeInput, TramitacaoDocumentoUncheckedUpdateWithoutSetorRecebeInput>
    create: XOR<TramitacaoDocumentoCreateWithoutSetorRecebeInput, TramitacaoDocumentoUncheckedCreateWithoutSetorRecebeInput>
  }

  export type TramitacaoDocumentoUpdateWithWhereUniqueWithoutSetorRecebeInput = {
    where: TramitacaoDocumentoWhereUniqueInput
    data: XOR<TramitacaoDocumentoUpdateWithoutSetorRecebeInput, TramitacaoDocumentoUncheckedUpdateWithoutSetorRecebeInput>
  }

  export type TramitacaoDocumentoUpdateManyWithWhereWithoutSetorRecebeInput = {
    where: TramitacaoDocumentoScalarWhereInput
    data: XOR<TramitacaoDocumentoUpdateManyMutationInput, TramitacaoDocumentoUncheckedUpdateManyWithoutSetorRecebeInput>
  }

  export type DocumentoCreateWithoutTramitacoesInput = {
    numero: string
    titulo: string
    descricao: string
    dataCadastro?: Date | string
    arquivo: string
    tipoDocumento: TipoDocumentoCreateNestedOneWithoutDocumentosInput
  }

  export type DocumentoUncheckedCreateWithoutTramitacoesInput = {
    id?: number
    numero: string
    titulo: string
    descricao: string
    dataCadastro?: Date | string
    arquivo: string
    tipoDocumentoId: number
  }

  export type DocumentoCreateOrConnectWithoutTramitacoesInput = {
    where: DocumentoWhereUniqueInput
    create: XOR<DocumentoCreateWithoutTramitacoesInput, DocumentoUncheckedCreateWithoutTramitacoesInput>
  }

  export type SetorCreateWithoutTramitacoesEnviadasInput = {
    sigla: string
    descricao: string
    tramitacoesRecebidas?: TramitacaoDocumentoCreateNestedManyWithoutSetorRecebeInput
  }

  export type SetorUncheckedCreateWithoutTramitacoesEnviadasInput = {
    id?: number
    sigla: string
    descricao: string
    tramitacoesRecebidas?: TramitacaoDocumentoUncheckedCreateNestedManyWithoutSetorRecebeInput
  }

  export type SetorCreateOrConnectWithoutTramitacoesEnviadasInput = {
    where: SetorWhereUniqueInput
    create: XOR<SetorCreateWithoutTramitacoesEnviadasInput, SetorUncheckedCreateWithoutTramitacoesEnviadasInput>
  }

  export type SetorCreateWithoutTramitacoesRecebidasInput = {
    sigla: string
    descricao: string
    tramitacoesEnviadas?: TramitacaoDocumentoCreateNestedManyWithoutSetorEnvioInput
  }

  export type SetorUncheckedCreateWithoutTramitacoesRecebidasInput = {
    id?: number
    sigla: string
    descricao: string
    tramitacoesEnviadas?: TramitacaoDocumentoUncheckedCreateNestedManyWithoutSetorEnvioInput
  }

  export type SetorCreateOrConnectWithoutTramitacoesRecebidasInput = {
    where: SetorWhereUniqueInput
    create: XOR<SetorCreateWithoutTramitacoesRecebidasInput, SetorUncheckedCreateWithoutTramitacoesRecebidasInput>
  }

  export type DocumentoUpsertWithoutTramitacoesInput = {
    update: XOR<DocumentoUpdateWithoutTramitacoesInput, DocumentoUncheckedUpdateWithoutTramitacoesInput>
    create: XOR<DocumentoCreateWithoutTramitacoesInput, DocumentoUncheckedCreateWithoutTramitacoesInput>
    where?: DocumentoWhereInput
  }

  export type DocumentoUpdateToOneWithWhereWithoutTramitacoesInput = {
    where?: DocumentoWhereInput
    data: XOR<DocumentoUpdateWithoutTramitacoesInput, DocumentoUncheckedUpdateWithoutTramitacoesInput>
  }

  export type DocumentoUpdateWithoutTramitacoesInput = {
    numero?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    dataCadastro?: DateTimeFieldUpdateOperationsInput | Date | string
    arquivo?: StringFieldUpdateOperationsInput | string
    tipoDocumento?: TipoDocumentoUpdateOneRequiredWithoutDocumentosNestedInput
  }

  export type DocumentoUncheckedUpdateWithoutTramitacoesInput = {
    id?: IntFieldUpdateOperationsInput | number
    numero?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    dataCadastro?: DateTimeFieldUpdateOperationsInput | Date | string
    arquivo?: StringFieldUpdateOperationsInput | string
    tipoDocumentoId?: IntFieldUpdateOperationsInput | number
  }

  export type SetorUpsertWithoutTramitacoesEnviadasInput = {
    update: XOR<SetorUpdateWithoutTramitacoesEnviadasInput, SetorUncheckedUpdateWithoutTramitacoesEnviadasInput>
    create: XOR<SetorCreateWithoutTramitacoesEnviadasInput, SetorUncheckedCreateWithoutTramitacoesEnviadasInput>
    where?: SetorWhereInput
  }

  export type SetorUpdateToOneWithWhereWithoutTramitacoesEnviadasInput = {
    where?: SetorWhereInput
    data: XOR<SetorUpdateWithoutTramitacoesEnviadasInput, SetorUncheckedUpdateWithoutTramitacoesEnviadasInput>
  }

  export type SetorUpdateWithoutTramitacoesEnviadasInput = {
    sigla?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    tramitacoesRecebidas?: TramitacaoDocumentoUpdateManyWithoutSetorRecebeNestedInput
  }

  export type SetorUncheckedUpdateWithoutTramitacoesEnviadasInput = {
    id?: IntFieldUpdateOperationsInput | number
    sigla?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    tramitacoesRecebidas?: TramitacaoDocumentoUncheckedUpdateManyWithoutSetorRecebeNestedInput
  }

  export type SetorUpsertWithoutTramitacoesRecebidasInput = {
    update: XOR<SetorUpdateWithoutTramitacoesRecebidasInput, SetorUncheckedUpdateWithoutTramitacoesRecebidasInput>
    create: XOR<SetorCreateWithoutTramitacoesRecebidasInput, SetorUncheckedCreateWithoutTramitacoesRecebidasInput>
    where?: SetorWhereInput
  }

  export type SetorUpdateToOneWithWhereWithoutTramitacoesRecebidasInput = {
    where?: SetorWhereInput
    data: XOR<SetorUpdateWithoutTramitacoesRecebidasInput, SetorUncheckedUpdateWithoutTramitacoesRecebidasInput>
  }

  export type SetorUpdateWithoutTramitacoesRecebidasInput = {
    sigla?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    tramitacoesEnviadas?: TramitacaoDocumentoUpdateManyWithoutSetorEnvioNestedInput
  }

  export type SetorUncheckedUpdateWithoutTramitacoesRecebidasInput = {
    id?: IntFieldUpdateOperationsInput | number
    sigla?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    tramitacoesEnviadas?: TramitacaoDocumentoUncheckedUpdateManyWithoutSetorEnvioNestedInput
  }

  export type TipoDocumentoCreateWithoutDocumentosInput = {
    descricao: string
  }

  export type TipoDocumentoUncheckedCreateWithoutDocumentosInput = {
    id?: number
    descricao: string
  }

  export type TipoDocumentoCreateOrConnectWithoutDocumentosInput = {
    where: TipoDocumentoWhereUniqueInput
    create: XOR<TipoDocumentoCreateWithoutDocumentosInput, TipoDocumentoUncheckedCreateWithoutDocumentosInput>
  }

  export type TramitacaoDocumentoCreateWithoutDocumentoInput = {
    recebido?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    setorEnvio: SetorCreateNestedOneWithoutTramitacoesEnviadasInput
    setorRecebe: SetorCreateNestedOneWithoutTramitacoesRecebidasInput
  }

  export type TramitacaoDocumentoUncheckedCreateWithoutDocumentoInput = {
    id?: number
    setorEnvioId: number
    setorRecebeId: number
    recebido?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TramitacaoDocumentoCreateOrConnectWithoutDocumentoInput = {
    where: TramitacaoDocumentoWhereUniqueInput
    create: XOR<TramitacaoDocumentoCreateWithoutDocumentoInput, TramitacaoDocumentoUncheckedCreateWithoutDocumentoInput>
  }

  export type TramitacaoDocumentoCreateManyDocumentoInputEnvelope = {
    data: TramitacaoDocumentoCreateManyDocumentoInput | TramitacaoDocumentoCreateManyDocumentoInput[]
    skipDuplicates?: boolean
  }

  export type TipoDocumentoUpsertWithoutDocumentosInput = {
    update: XOR<TipoDocumentoUpdateWithoutDocumentosInput, TipoDocumentoUncheckedUpdateWithoutDocumentosInput>
    create: XOR<TipoDocumentoCreateWithoutDocumentosInput, TipoDocumentoUncheckedCreateWithoutDocumentosInput>
    where?: TipoDocumentoWhereInput
  }

  export type TipoDocumentoUpdateToOneWithWhereWithoutDocumentosInput = {
    where?: TipoDocumentoWhereInput
    data: XOR<TipoDocumentoUpdateWithoutDocumentosInput, TipoDocumentoUncheckedUpdateWithoutDocumentosInput>
  }

  export type TipoDocumentoUpdateWithoutDocumentosInput = {
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type TipoDocumentoUncheckedUpdateWithoutDocumentosInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type TramitacaoDocumentoUpsertWithWhereUniqueWithoutDocumentoInput = {
    where: TramitacaoDocumentoWhereUniqueInput
    update: XOR<TramitacaoDocumentoUpdateWithoutDocumentoInput, TramitacaoDocumentoUncheckedUpdateWithoutDocumentoInput>
    create: XOR<TramitacaoDocumentoCreateWithoutDocumentoInput, TramitacaoDocumentoUncheckedCreateWithoutDocumentoInput>
  }

  export type TramitacaoDocumentoUpdateWithWhereUniqueWithoutDocumentoInput = {
    where: TramitacaoDocumentoWhereUniqueInput
    data: XOR<TramitacaoDocumentoUpdateWithoutDocumentoInput, TramitacaoDocumentoUncheckedUpdateWithoutDocumentoInput>
  }

  export type TramitacaoDocumentoUpdateManyWithWhereWithoutDocumentoInput = {
    where: TramitacaoDocumentoScalarWhereInput
    data: XOR<TramitacaoDocumentoUpdateManyMutationInput, TramitacaoDocumentoUncheckedUpdateManyWithoutDocumentoInput>
  }

  export type DocumentoCreateWithoutTipoDocumentoInput = {
    numero: string
    titulo: string
    descricao: string
    dataCadastro?: Date | string
    arquivo: string
    tramitacoes?: TramitacaoDocumentoCreateNestedManyWithoutDocumentoInput
  }

  export type DocumentoUncheckedCreateWithoutTipoDocumentoInput = {
    id?: number
    numero: string
    titulo: string
    descricao: string
    dataCadastro?: Date | string
    arquivo: string
    tramitacoes?: TramitacaoDocumentoUncheckedCreateNestedManyWithoutDocumentoInput
  }

  export type DocumentoCreateOrConnectWithoutTipoDocumentoInput = {
    where: DocumentoWhereUniqueInput
    create: XOR<DocumentoCreateWithoutTipoDocumentoInput, DocumentoUncheckedCreateWithoutTipoDocumentoInput>
  }

  export type DocumentoCreateManyTipoDocumentoInputEnvelope = {
    data: DocumentoCreateManyTipoDocumentoInput | DocumentoCreateManyTipoDocumentoInput[]
    skipDuplicates?: boolean
  }

  export type DocumentoUpsertWithWhereUniqueWithoutTipoDocumentoInput = {
    where: DocumentoWhereUniqueInput
    update: XOR<DocumentoUpdateWithoutTipoDocumentoInput, DocumentoUncheckedUpdateWithoutTipoDocumentoInput>
    create: XOR<DocumentoCreateWithoutTipoDocumentoInput, DocumentoUncheckedCreateWithoutTipoDocumentoInput>
  }

  export type DocumentoUpdateWithWhereUniqueWithoutTipoDocumentoInput = {
    where: DocumentoWhereUniqueInput
    data: XOR<DocumentoUpdateWithoutTipoDocumentoInput, DocumentoUncheckedUpdateWithoutTipoDocumentoInput>
  }

  export type DocumentoUpdateManyWithWhereWithoutTipoDocumentoInput = {
    where: DocumentoScalarWhereInput
    data: XOR<DocumentoUpdateManyMutationInput, DocumentoUncheckedUpdateManyWithoutTipoDocumentoInput>
  }

  export type DocumentoScalarWhereInput = {
    AND?: DocumentoScalarWhereInput | DocumentoScalarWhereInput[]
    OR?: DocumentoScalarWhereInput[]
    NOT?: DocumentoScalarWhereInput | DocumentoScalarWhereInput[]
    id?: IntFilter<"Documento"> | number
    numero?: StringFilter<"Documento"> | string
    titulo?: StringFilter<"Documento"> | string
    descricao?: StringFilter<"Documento"> | string
    dataCadastro?: DateTimeFilter<"Documento"> | Date | string
    arquivo?: StringFilter<"Documento"> | string
    tipoDocumentoId?: IntFilter<"Documento"> | number
  }

  export type TramitacaoDocumentoCreateManySetorEnvioInput = {
    id?: number
    documentoId: number
    setorRecebeId: number
    recebido?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TramitacaoDocumentoCreateManySetorRecebeInput = {
    id?: number
    documentoId: number
    setorEnvioId: number
    recebido?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TramitacaoDocumentoUpdateWithoutSetorEnvioInput = {
    recebido?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documento?: DocumentoUpdateOneRequiredWithoutTramitacoesNestedInput
    setorRecebe?: SetorUpdateOneRequiredWithoutTramitacoesRecebidasNestedInput
  }

  export type TramitacaoDocumentoUncheckedUpdateWithoutSetorEnvioInput = {
    id?: IntFieldUpdateOperationsInput | number
    documentoId?: IntFieldUpdateOperationsInput | number
    setorRecebeId?: IntFieldUpdateOperationsInput | number
    recebido?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TramitacaoDocumentoUncheckedUpdateManyWithoutSetorEnvioInput = {
    id?: IntFieldUpdateOperationsInput | number
    documentoId?: IntFieldUpdateOperationsInput | number
    setorRecebeId?: IntFieldUpdateOperationsInput | number
    recebido?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TramitacaoDocumentoUpdateWithoutSetorRecebeInput = {
    recebido?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documento?: DocumentoUpdateOneRequiredWithoutTramitacoesNestedInput
    setorEnvio?: SetorUpdateOneRequiredWithoutTramitacoesEnviadasNestedInput
  }

  export type TramitacaoDocumentoUncheckedUpdateWithoutSetorRecebeInput = {
    id?: IntFieldUpdateOperationsInput | number
    documentoId?: IntFieldUpdateOperationsInput | number
    setorEnvioId?: IntFieldUpdateOperationsInput | number
    recebido?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TramitacaoDocumentoUncheckedUpdateManyWithoutSetorRecebeInput = {
    id?: IntFieldUpdateOperationsInput | number
    documentoId?: IntFieldUpdateOperationsInput | number
    setorEnvioId?: IntFieldUpdateOperationsInput | number
    recebido?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TramitacaoDocumentoCreateManyDocumentoInput = {
    id?: number
    setorEnvioId: number
    setorRecebeId: number
    recebido?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TramitacaoDocumentoUpdateWithoutDocumentoInput = {
    recebido?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    setorEnvio?: SetorUpdateOneRequiredWithoutTramitacoesEnviadasNestedInput
    setorRecebe?: SetorUpdateOneRequiredWithoutTramitacoesRecebidasNestedInput
  }

  export type TramitacaoDocumentoUncheckedUpdateWithoutDocumentoInput = {
    id?: IntFieldUpdateOperationsInput | number
    setorEnvioId?: IntFieldUpdateOperationsInput | number
    setorRecebeId?: IntFieldUpdateOperationsInput | number
    recebido?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TramitacaoDocumentoUncheckedUpdateManyWithoutDocumentoInput = {
    id?: IntFieldUpdateOperationsInput | number
    setorEnvioId?: IntFieldUpdateOperationsInput | number
    setorRecebeId?: IntFieldUpdateOperationsInput | number
    recebido?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentoCreateManyTipoDocumentoInput = {
    id?: number
    numero: string
    titulo: string
    descricao: string
    dataCadastro?: Date | string
    arquivo: string
  }

  export type DocumentoUpdateWithoutTipoDocumentoInput = {
    numero?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    dataCadastro?: DateTimeFieldUpdateOperationsInput | Date | string
    arquivo?: StringFieldUpdateOperationsInput | string
    tramitacoes?: TramitacaoDocumentoUpdateManyWithoutDocumentoNestedInput
  }

  export type DocumentoUncheckedUpdateWithoutTipoDocumentoInput = {
    id?: IntFieldUpdateOperationsInput | number
    numero?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    dataCadastro?: DateTimeFieldUpdateOperationsInput | Date | string
    arquivo?: StringFieldUpdateOperationsInput | string
    tramitacoes?: TramitacaoDocumentoUncheckedUpdateManyWithoutDocumentoNestedInput
  }

  export type DocumentoUncheckedUpdateManyWithoutTipoDocumentoInput = {
    id?: IntFieldUpdateOperationsInput | number
    numero?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    dataCadastro?: DateTimeFieldUpdateOperationsInput | Date | string
    arquivo?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}